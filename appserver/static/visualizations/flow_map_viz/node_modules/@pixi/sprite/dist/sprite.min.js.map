{"version":3,"file":"sprite.min.js","sources":["../src/Sprite.js"],"sourcesContent":["import { Point, ObservablePoint, Rectangle } from '@pixi/math';\nimport { sign } from '@pixi/utils';\nimport { Texture } from '@pixi/core';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n*\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = PIXI.Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * @param {PIXI.Texture} [texture] - The texture for this sprite.\n     */\n    constructor(texture)\n    {\n        super();\n\n        /**\n         * The anchor point defines the normalized coordinates\n         * in the texture that map to the position of this\n         * sprite.\n         *\n         * By default, this is `(0,0)` (or `texture.defaultAnchor`\n         * if you have modified that), which means the position\n         * `(x,y)` of this `Sprite` will be the top-left corner.\n         *\n         * Note: Updating `texture.defaultAnchor` after\n         * constructing a `Sprite` does _not_ update its anchor.\n         *\n         * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n         *\n         * @default `texture.defaultAnchor`\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        /**\n         * The texture that the sprite is using\n         *\n         * @private\n         * @member {PIXI.Texture}\n         */\n        this._texture = null;\n\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._width = 0;\n\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._height = 0;\n\n        /**\n         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = null;\n        this._tintRGB = null;\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * The shader that will be used to render the sprite. Set to null to remove a current shader.\n         *\n         * @member {PIXI.Filter|PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * Cached tint value so we can tell when the tint is changed.\n         * Value is used for 2d CanvasRenderer.\n         *\n         * @protected\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._cachedTint = 0xFFFFFF;\n\n        /**\n         * this is used to store the uvs data of the sprite, assigned at the same time\n         * as the vertexData in calculateVertices()\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n\n        /**\n         * this is used to store the vertex data of the sprite (basically a quad)\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexData = new Float32Array(8);\n\n        /**\n         * This is used to calculate the bounds of the object IF it is a trimmed sprite\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n        this.size = 4;\n        this.start = 0;\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = 'batch';\n\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /**\n     * Called when the anchor position updates.\n     *\n     * @private\n     */\n    _onAnchorUpdate()\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /**\n     * calculates worldTransform * vertices, store it in vertexData\n     */\n    calculateVertices()\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n    }\n\n    /**\n     * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n     * This is used to ensure that the true width and height of a trimmed texture is respected\n     */\n    calculateTrimmedVertices()\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n    *\n    * Renders the object using the WebGL renderer\n    *\n    * @protected\n    * @param {PIXI.Renderer} renderer - The webgl renderer to use.\n    */\n    _render(renderer)\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the sprite.\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} [rect] - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n        this.shader = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from\n     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return {PIXI.Sprite} The newly created sprite\n     */\n    static from(source, options)\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels()\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the text. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    set anchor(value) // eslint-disable-line require-jsdoc\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    set texture(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],"names":["const","tempPoint","Point","indices","Uint16Array","Sprite","texture","super","this","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","shader","_cachedTint","uvs","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","size","start","pluginName","isSprite","_roundPixels","settings","ROUND_PIXELS","_onTextureUpdate","scale","sign","orig","width","height","calculateVertices","transform","_worldID","_updateID","_uvs","uvsFloat32","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","resolution","RESOLUTION","i","length","Math","round","calculateTrimmedVertices","_render","renderer","batch","setObjectRenderer","plugins","render","_calculateBounds","_bounds","addQuad","getLocalBounds","rect","children","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","off","destroyBaseTexture","baseTexture","from","source","prototypeAccessors","roundPixels","value","abs","s","copyFrom","valid","once","Container"],"mappings":"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"}