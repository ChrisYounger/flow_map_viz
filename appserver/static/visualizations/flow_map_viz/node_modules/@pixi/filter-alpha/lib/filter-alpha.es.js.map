{"version":3,"file":"filter-alpha.es.js","sources":["../src/AlphaFilter.js"],"sourcesContent":["import { Filter, defaultVertex } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param {number} [alpha=1] Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     *\n     * @member {number}\n     * @default 1\n     */\n    get alpha()\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"],"names":["super"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAa,WAAW;IAKpB,oBAAW,CAAC,KAAW;IACvB;qCADiB,GAAG;;QAEhBA,WAAK,OAAC,aAAa,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;;QAE9C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;;;;;;+DACtB;;;;;;;;IAQD,mBAAI;IACJ;QACI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;MAC/B;;IAED,mBAAI,sBAAM,KAAK;IACf;QACI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;KAChC;;;;;EA1B4B;;;;"}