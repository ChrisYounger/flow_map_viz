{"version":3,"file":"extract.min.js","sources":["../src/Extract.js"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @class\n * @memberof PIXI\n */\nexport class Extract\n{\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.Extract} extract\n         * @memberof PIXI.Renderer#\n         * @see PIXI.Extract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target, format, quality)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target, format, quality)\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            canvasBuffer.context.scale(1, -1);\n            canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param pixels {number[] | Uint8Array | Uint8ClampedArray} array of pixel data\n     * @param out {number[] | Uint8Array | Uint8ClampedArray} output array\n     */\n    static arrayPostDivide(pixels, out)\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"],"names":["const","TEMP_RECT","Extract","renderer","this","extract","image","target","format","quality","Image","src","base64","canvas","toDataURL","resolution","frame","renderTexture","flipY","generated","RenderTexture","generateTexture","baseTexture","bind","width","height","Math","floor","canvasBuffer","CanvasRenderTarget","webglPixels","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","arrayPostDivide","data","putImageData","scale","drawImage","destroy","pixels","out","let","i","length","alpha","round","min"],"mappings":"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"}