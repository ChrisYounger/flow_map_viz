{"version":3,"file":"extract.es.js","sources":["../src/Extract.js"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @class\n * @memberof PIXI\n */\nexport class Extract\n{\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.Extract} extract\n         * @memberof PIXI.Renderer#\n         * @see PIXI.Extract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target, format, quality)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target, format, quality)\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            canvasBuffer.context.scale(1, -1);\n            canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param pixels {number[] | Uint8Array | Uint8ClampedArray} array of pixel data\n     * @param out {number[] | Uint8Array | Uint8ClampedArray} output array\n     */\n    static arrayPostDivide(pixels, out)\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"],"names":["const","let"],"mappings":"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"}