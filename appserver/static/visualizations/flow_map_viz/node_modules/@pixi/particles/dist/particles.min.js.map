{"version":3,"file":"particles.min.js","sources":["../src/ParticleContainer.js","../src/ParticleBuffer.js","../src/ParticleRenderer.js"],"sourcesContent":["import { BLEND_MODES } from '@pixi/constants';\nimport { hex2rgb } from '@pixi/utils';\nimport { Container } from '@pixi/display';\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container\n{\n    /**\n     * @param {number} [maxSize=1500] - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        this._properties = [false, true, false, false, false];\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._maxSize = maxSize;\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._batchSize = batchSize;\n\n        /**\n         * @member {Array<PIXI.Buffer>}\n         * @private\n         */\n        this._buffers = null;\n\n        /**\n         * for every batch stores _updateID corresponding to the last change in that batch\n         * @member {number[]}\n         * @private\n         */\n        this._bufferUpdateIDs = [];\n\n        /**\n         * when child inserted, removed or changes position this number goes up\n         * @member {number[]}\n         * @private\n         */\n        this._updateID = 0;\n\n        /**\n         * @member {boolean}\n         *\n         */\n        this.interactiveChildren = false;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n         * to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * If true, container allocates more batches in case there are more than `maxSize` particles.\n         * @member {boolean}\n         * @default false\n         */\n        this.autoResize = autoResize;\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * Default to true here as performance is usually the priority for particles.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.roundPixels = true;\n\n        /**\n         * The texture used to render the children.\n         *\n         * @readonly\n         * @member {PIXI.BaseTexture}\n         */\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        /**\n         * The tint applied to the container.\n         * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = 0;\n        this.tintRgb = new Float32Array(4);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param {object} properties - The properties to be uploaded\n     */\n    setProperties(properties)\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    /**\n     * Updates the object transform for rendering\n     *\n     * @private\n     */\n    updateTransform()\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n        //  PIXI.Container.prototype.updateTransform.call( this );\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._tint = value;\n        hex2rgb(value, this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The webgl renderer\n     */\n    render(renderer)\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     *\n     * @private\n     * @param {number} smallestChildIndex - The smallest child index\n     */\n    onChildrenChange(smallestChildIndex)\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    dispose()\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n","import { createIndicesForQuads } from '@pixi/utils';\nimport { Geometry, Buffer } from '@pixi/core';\nimport { TYPES } from '@pixi/constants';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport class ParticleBuffer\n{\n    /**\n     * @private\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(properties, dynamicPropertyFlags, size)\n    {\n        this.geometry = new Geometry();\n\n        this.indexBuffer = null;\n\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @private\n         * @member {number}\n         */\n        this.size = size;\n\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n\n        /**\n         * A list of the properties that are static.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    initBuffers()\n    {\n        const geometry = this.geometry;\n\n        let dynamicOffset = 0;\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indexBuffer = new Buffer(createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.dynamicBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.staticBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadDynamic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer._updateID++;\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadStatic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer._updateID++;\n    }\n\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     * @private\n     */\n    destroy()\n    {\n        this.indexBuffer = null;\n\n        this.dynamicProperties = null;\n        // this.dynamicBuffer.destroy();\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        // this.staticBuffer.destroy();\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { ObjectRenderer, Shader, State } from '@pixi/core';\nimport { correctBlendMode, premultiplyRgba, premultiplyTint } from '@pixi/utils';\nimport { Matrix } from '@pixi/math';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport vertex from './particles.vert';\nimport fragment from './particles.frag';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @class\n * @memberof PIXI\n */\nexport class ParticleRenderer extends ObjectRenderer\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n\n        /**\n         * The default shader that is used if a sprite doesn't have a more specific one.\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = null;\n\n        this.properties = null;\n\n        this.tempMatrix = new Matrix();\n\n        this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: TYPES.UNSIGNED_BYTE,\n                uploadFunction: this.uploadTint,\n                offset: 0,\n            },\n        ];\n\n        this.shader = Shader.from(vertex, fragment, {});\n\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /**\n     * Renders the particle container object.\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     */\n    render(container)\n    {\n        const children = container.children;\n        const maxSize = container._maxSize;\n        const batchSize = container._batchSize;\n        const renderer = this.renderer;\n        let totalChildren = children.length;\n\n        if (totalChildren === 0)\n        {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize)\n        {\n            totalChildren = maxSize;\n        }\n\n        let buffers = container._buffers;\n\n        if (!buffers)\n        {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n\n        const baseTexture = children[0]._texture.baseTexture;\n\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = correctBlendMode(container.blendMode, baseTexture.alphaMode);\n        renderer.state.set(this.state);\n\n        const gl = renderer.gl;\n\n        const m = container.worldTransform.copyTo(this.tempMatrix);\n\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n\n        this.shader.uniforms.uColor = premultiplyRgba(container.tintRgb,\n            container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n\n        this.shader.uniforms.uSampler = baseTexture;\n\n        this.renderer.shader.bind(this.shader);\n\n        let updateStatic = false;\n\n        // now lets upload and render the buffers..\n        for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1)\n        {\n            let amount = (totalChildren - i);\n\n            if (amount > batchSize)\n            {\n                amount = batchSize;\n            }\n\n            if (j >= buffers.length)\n            {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n\n            const buffer = buffers[j];\n\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n\n            const bid = container._bufferUpdateIDs[j] || 0;\n\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic)\n            {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    }\n\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer[]} The buffers\n     * @private\n     */\n    generateBuffers(container)\n    {\n        const buffers = [];\n        const size = container._maxSize;\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        for (let i = 0; i < size; i += batchSize)\n        {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n\n        return buffers;\n    }\n\n    /**\n     * Creates one more particle buffer, because container has autoResize feature\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer} generated buffer\n     * @private\n     */\n    _generateOneMoreBuffer(container)\n    {\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    }\n\n    /**\n     * Uploads the vertices.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their vertices uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    uploadVertices(children, startIndex, amount, array, stride, offset)\n    {\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite = children[startIndex + i];\n            const texture = sprite._texture;\n            const sx = sprite.scale.x;\n            const sy = sprite.scale.y;\n            const trim = texture.trim;\n            const orig = texture.orig;\n\n            if (trim)\n            {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else\n            {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the position.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their positions uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    uploadPosition(children, startIndex, amount, array, stride, offset)\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spritePosition = children[startIndex + i].position;\n\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the rotiation.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    uploadRotation(children, startIndex, amount, array, stride, offset)\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spriteRotation = children[startIndex + i].rotation;\n\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the Uvs\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    uploadUvs(children, startIndex, amount, array, stride, offset)\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const textureUvs = children[startIndex + i]._texture._uvs;\n\n            if (textureUvs)\n            {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n\n                offset += stride * 4;\n            }\n            else\n            {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n\n                offset += stride * 4;\n            }\n        }\n    }\n\n    /**\n     * Uploads the tint.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    uploadTint(children, startIndex, amount, array, stride, offset)\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite = children[startIndex + i];\n            const premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n            const alpha = sprite.alpha;\n            // we dont call extra function if alpha is 1.0, that's faster\n            const argb = alpha < 1.0 && premultiplied ? premultiplyTint(sprite._tintRGB, alpha)\n                : sprite._tintRGB + (alpha * 255 << 24);\n\n            array[offset] = argb;\n            array[offset + stride] = argb;\n            array[offset + (stride * 2)] = argb;\n            array[offset + (stride * 3)] = argb;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Destroys the ParticleRenderer.\n     */\n    destroy()\n    {\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.tempMatrix = null;\n    }\n}\n"],"names":["ParticleContainer","maxSize","properties","batchSize","autoResize","super","this","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","BLEND_MODES","NORMAL","roundPixels","baseTexture","setProperties","_tint","tintRgb","Float32Array","tint","vertices","scale","position","rotation","uvs","alpha","updateTransform","displayObjectUpdateTransform","prototypeAccessors","value","hex2rgb","render","renderer","visible","worldAlpha","children","length","renderable","_texture","valid","once","onChildrenChange","batch","setObjectRenderer","plugins","particle","smallestChildIndex","const","bufferIndex","Math","floor","push","dispose","let","i","destroy","options","Container","ParticleBuffer","dynamicPropertyFlags","size","geometry","Geometry","indexBuffer","dynamicProperties","staticProperties","property","attributeName","uploadFunction","type","TYPES","FLOAT","offset","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","initBuffers","dynamicOffset","Buffer","createIndicesForQuads","addIndex","dynBuffer","ArrayBuffer","Uint32Array","staticOffset","statBuffer","addAttribute","property$2","UNSIGNED_BYTE","property$3","uploadDynamic","startIndex","amount","uploadStatic","ParticleRenderer","shader","tempMatrix","Matrix","uploadVertices","uploadPosition","uploadRotation","uploadUvs","uploadTint","Shader","from","vertex","fragment","state","State","for2d","container","totalChildren","buffers","generateBuffers","correctBlendMode","alphaMode","set","gl","m","worldTransform","copyTo","prepend","globalUniforms","uniforms","projectionMatrix","translationMatrix","toArray","uColor","premultiplyRgba","uSampler","bind","updateStatic","j","_generateOneMoreBuffer","buffer","bid","drawElements","TRIANGLES","UNSIGNED_SHORT","array","stride","w0","w1","h0","h1","sprite","texture","sx","x","sy","y","trim","orig","anchor","width","height","spritePosition","spriteRotation","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","premultiplied","argb","premultiplyTint","_tintRGB","ObjectRenderer"],"mappings":"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"}