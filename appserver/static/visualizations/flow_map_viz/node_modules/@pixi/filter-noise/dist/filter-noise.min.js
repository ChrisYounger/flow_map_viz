/*!
 * @pixi/filter-noise - v5.2.1
 * Compiled Tue, 28 Jan 2020 23:33:11 UTC
 *
 * @pixi/filter-noise is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
this.PIXI=this.PIXI||{},this.PIXI.filters=this.PIXI.filters||{};var _pixi_filter_noise=function(e,o){"use strict";var n="precision highp float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\n\nuniform float uNoise;\nuniform float uSeed;\nuniform sampler2D uSampler;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main()\n{\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\n    float diff = (randomValue - 0.5) * uNoise;\n\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\n    if (color.a > 0.0) {\n        color.rgb /= color.a;\n    }\n\n    color.r += diff;\n    color.g += diff;\n    color.b += diff;\n\n    // Premultiply alpha again.\n    color.rgb *= color.a;\n\n    gl_FragColor = color;\n}\n",r=function(e){function r(r,i){void 0===r&&(r=.5),void 0===i&&(i=Math.random()),e.call(this,o.defaultFilterVertex,n,{uNoise:0,uSeed:0}),this.noise=r,this.seed=i}e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r;var i={noise:{configurable:!0},seed:{configurable:!0}};return i.noise.get=function(){return this.uniforms.uNoise},i.noise.set=function(e){this.uniforms.uNoise=e},i.seed.get=function(){return this.uniforms.uSeed},i.seed.set=function(e){this.uniforms.uSeed=e},Object.defineProperties(r.prototype,i),r}(o.Filter);return e.NoiseFilter=r,e}({},PIXI);Object.assign(this.PIXI.filters,_pixi_filter_noise);
//# sourceMappingURL=filter-noise.min.js.map
