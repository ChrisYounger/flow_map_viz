{"version":3,"file":"text-bitmap.min.js","sources":["../src/BitmapText.js","../src/BitmapFontLoader.js"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { ObservablePoint, Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Sprite } from '@pixi/sprite';\nimport { removeItems, getResolutionOfUrl } from '@pixi/utils';\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * The primary disadvantage is that you need to preload the bitmap font assets, and thus the styling is set in stone.\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * You can generate the fnt files using\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    /**\n     * @param {string} text - A string that you would like the text to display.\n     * @param {object} style - The style parameters.\n     * @param {string|object} style.font - The font descriptor for the object, can be passed as a string of form\n     *      \"24px FontName\" or \"FontName\" or as an object with explicit name/size properties.\n     * @param {string} [style.font.name] - The bitmap font id.\n     * @param {number} [style.font.size] - The size of the font in pixels, e.g. 24\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'), does not affect\n     *      single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     */\n    constructor(text, style = {})\n    {\n        super();\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the letter sprite pool.\n         *\n         * @member {PIXI.Sprite[]}\n         * @private\n         */\n        this._glyphs = [];\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._font = {\n            tint: style.tint !== undefined ? style.tint : 0xFFFFFF,\n            align: style.align || 'left',\n            name: null,\n            size: 0,\n        };\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {object}\n         * @private\n         */\n        this.font = style.font; // run font setter\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = 0;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align.\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Letter spacing. This is useful for setting the space between characters.\n         * @member {number}\n         * @private\n         */\n        this._letterSpacing = 0;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(() => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * The dirty state of this object.\n         *\n         * @member {boolean}\n         */\n        this.dirty = false;\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.roundPixels = settings.ROUND_PIXELS;\n\n        this.updateText();\n    }\n\n    /**\n     * Renders text and updates it when needed\n     *\n     * @private\n     */\n    updateText()\n    {\n        const data = BitmapText.fonts[this._font.name];\n        const scale = this._font.size / data.size;\n        const pos = new Point();\n        const chars = [];\n        const lineWidths = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const textLength = text.length;\n        const maxWidth = this._maxWidth * data.size / this._font.size;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n\n        for (let i = 0; i < textLength; i++)\n        {\n            const charCode = text.charCodeAt(i);\n            const char = text.charAt(i);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            chars.push({\n                texture: charData.texture,\n                line,\n                charCode,\n                position: new Point(pos.x + charData.xOffset + (this._letterSpacing / 2), pos.y + charData.yOffset),\n            });\n            pos.x += charData.xAdvance + this._letterSpacing;\n            lastLineWidth = pos.x;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n            }\n        }\n\n        const lastChar = text.charAt(text.length - 1);\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._font.align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._font.align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n        const tint = this.tint;\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            let c = this._glyphs[i]; // get the next glyph sprite\n\n            if (c)\n            {\n                c.texture = chars[i].texture;\n            }\n            else\n            {\n                c = new Sprite(chars[i].texture);\n                c.roundPixels = this.roundPixels;\n                this._glyphs.push(c);\n            }\n\n            c.position.x = (chars[i].position.x + lineAlignOffsets[chars[i].line]) * scale;\n            c.position.y = chars[i].position.y * scale;\n            c.scale.x = c.scale.y = scale;\n            c.tint = tint;\n\n            if (!c.parent)\n            {\n                this.addChild(c);\n            }\n        }\n\n        // remove unnecessary children.\n        for (let i = lenChars; i < this._glyphs.length; ++i)\n        {\n            this.removeChild(this._glyphs[i]);\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        // apply anchor\n        if (this.anchor.x !== 0 || this.anchor.y !== 0)\n        {\n            for (let i = 0; i < lenChars; i++)\n            {\n                this._glyphs[i].x -= this._textWidth * this.anchor.x;\n                this._glyphs[i].y -= this._textHeight * this.anchor.y;\n            }\n        }\n        this._maxLineHeight = maxLineHeight * scale;\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform()\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    getLocalBounds()\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    validate()\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     */\n    get tint()\n    {\n        return this._font.tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._font.tint = (typeof value === 'number' && value >= 0) ? value : 0xFFFFFF;\n\n        this.dirty = true;\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    get align()\n    {\n        return this._font.align;\n    }\n\n    set align(value) // eslint-disable-line require-jsdoc\n    {\n        this._font.align = value || 'left';\n\n        this.dirty = true;\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    set anchor(value) // eslint-disable-line require-jsdoc\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /**\n     * The font descriptor of the BitmapText object.\n     *\n     * @member {object}\n     */\n    get font()\n    {\n        return this._font;\n    }\n\n    set font(value) // eslint-disable-line require-jsdoc\n    {\n        if (!value)\n        {\n            return;\n        }\n\n        if (typeof value === 'string')\n        {\n            value = value.split(' ');\n\n            this._font.name = value.length === 1 ? value[0] : value.slice(1).join(' ');\n            this._font.size = value.length >= 2 ? parseInt(value[0], 10) : BitmapText.fonts[this._font.name].size;\n        }\n        else\n        {\n            this._font.name = value.name;\n            this._font.size = typeof value.size === 'number' ? value.size : parseInt(value.size, 10);\n        }\n\n        this.dirty = true;\n    }\n\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    get maxWidth()\n    {\n        return this._maxWidth;\n    }\n\n    set maxWidth(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxLineHeight()\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get textWidth()\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n\n    set letterSpacing(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get textHeight()\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * Register a bitmap font with data and a texture.\n     *\n     * @static\n     * @param {XMLDocument} xml - The XML document data.\n     * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n     *  If providing an object, the key is the `<page>` element's `file` attribute in the FNT file.\n     * @return {Object} Result font object with font, size, lineHeight and char fields.\n     */\n    static registerFont(xml, textures)\n    {\n        const data = {};\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const pages = xml.getElementsByTagName('page');\n        const res = getResolutionOfUrl(pages[0].getAttribute('file'), settings.RESOLUTION);\n        const pagesTextures = {};\n\n        data.font = info.getAttribute('face');\n        data.size = parseInt(info.getAttribute('size'), 10);\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10) / res;\n        data.chars = {};\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < pages.length; i++)\n        {\n            const id = pages[i].getAttribute('id');\n            const file = pages[i].getAttribute('file');\n\n            pagesTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n        }\n\n        // parse letters\n        const letters = xml.getElementsByTagName('char');\n\n        for (let i = 0; i < letters.length; i++)\n        {\n            const letter = letters[i];\n            const charCode = parseInt(letter.getAttribute('id'), 10);\n            const page = letter.getAttribute('page') || 0;\n            const textureRect = new Rectangle(\n                (parseInt(letter.getAttribute('x'), 10) / res) + (pagesTextures[page].frame.x / res),\n                (parseInt(letter.getAttribute('y'), 10) / res) + (pagesTextures[page].frame.y / res),\n                parseInt(letter.getAttribute('width'), 10) / res,\n                parseInt(letter.getAttribute('height'), 10) / res\n            );\n\n            data.chars[charCode] = {\n                xOffset: parseInt(letter.getAttribute('xoffset'), 10) / res,\n                yOffset: parseInt(letter.getAttribute('yoffset'), 10) / res,\n                xAdvance: parseInt(letter.getAttribute('xadvance'), 10) / res,\n                kerning: {},\n                texture: new Texture(pagesTextures[page].baseTexture, textureRect),\n                page,\n            };\n        }\n\n        // parse kernings\n        const kernings = xml.getElementsByTagName('kerning');\n\n        for (let i = 0; i < kernings.length; i++)\n        {\n            const kerning = kernings[i];\n            const first = parseInt(kerning.getAttribute('first'), 10) / res;\n            const second = parseInt(kerning.getAttribute('second'), 10) / res;\n            const amount = parseInt(kerning.getAttribute('amount'), 10) / res;\n\n            if (data.chars[second])\n            {\n                data.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n        // but it's very likely to change\n        BitmapText.fonts[data.font] = data;\n\n        return data;\n    }\n}\n\nBitmapText.fonts = {};\n","import { LoaderResource } from '@pixi/loaders';\nimport { BitmapText } from './BitmapText';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Register a BitmapText font from loader resource.\n     *\n     * @param {PIXI.LoaderResource} resource - Loader resource.\n     * @param {PIXI.Texture} texture - Reference to texture.\n     */\n    static parse(resource, texture)\n    {\n        resource.bitmapFont = BitmapText.registerFont(resource.data, texture);\n    }\n\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    static add()\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.DOCUMENT);\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @private\n     * @param {string} url Path to get directory for\n     */\n    static dirname(url)\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== LoaderResource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const pages = resource.data.getElementsByTagName('page');\n        const textures = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page) =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === pages.length)\n            {\n                BitmapFontLoader.parse(resource, textures);\n                next();\n            }\n        };\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].getAttribute('file');\n            const url = xmlUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n}\n"],"names":["BitmapText","text","style","super","this","_textWidth","_textHeight","_glyphs","_font","tint","undefined","align","name","size","font","_text","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","roundPixels","settings","ROUND_PIXELS","updateText","const","data","fonts","scale","pos","Point","chars","lineWidths","replace","textLength","length","maxWidth","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","i","charCode","charCodeAt","char","charAt","test","charData","kerning","x","push","texture","position","xOffset","y","yOffset","xAdvance","Math","max","height","removeItems","lineHeight","lastChar","lineAlignOffsets","let","alignOffset","lenChars","c","Sprite","parent","addChild","removeChild","anchor","updateTransform","validate","containerUpdateTransform","getLocalBounds","prototypeAccessors","value","set","copyFrom","split","slice","join","parseInt","String","textWidth","letterSpacing","textHeight","registerFont","xml","textures","info","getElementsByTagName","common","pages","res","getResolutionOfUrl","getAttribute","RESOLUTION","pagesTextures","Texture","id","file","Array","letters","letter","page","textureRect","Rectangle","frame","baseTexture","kernings","first","second","amount","Container","BitmapFontLoader","parse","resource","bitmapFont","add","LoaderResource","setExtensionXhrType","XHR_RESPONSE_TYPE","DOCUMENT","dirname","url","dir","use","next","type","TYPE","XML","xmlUrl","isDataUrl","baseUrl","completed","metadata","pageFile","Object","keys","exists","resources","bitmapResource","onAfterMiddleware","options","crossOrigin","loadType","LOAD_TYPE","IMAGE","assign","imageMetadata","parentResource"],"mappings":"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"}