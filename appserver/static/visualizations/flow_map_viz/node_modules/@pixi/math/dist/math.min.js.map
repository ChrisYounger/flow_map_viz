{"version":3,"file":"math.min.js","sources":["../src/const.ts","../src/Point.ts","../src/ObservablePoint.ts","../src/Matrix.ts","../src/groupD8.ts","../src/Transform.ts","../src/shapes/Rectangle.ts","../src/shapes/Circle.ts","../src/shapes/Ellipse.ts","../src/shapes/Polygon.ts","../src/shapes/RoundedRectangle.ts"],"sourcesContent":["/**\n * Two Pi.\n *\n * @static\n * @constant {number} PI_2\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @constant {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @constant {number} DEG_TO_RAD\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\nexport enum SHAPES {\n    POLY = 0,\n    RECT = 1,\n    CIRC = 2,\n    ELIP = 3,\n    RREC = 4,\n}\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @constant\n * @name SHAPES\n * @memberof PIXI\n * @type {enum}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n * @enum {number}\n */\n","import { IPoint } from './IPoint';\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nexport class Point implements IPoint\n{\n    public x: number;\n    public y: number;\n\n    /**\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy from\n     * @returns {this} Returns itself.\n     */\n    copyFrom(p: IPoint): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPoint} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p: IPoint): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns {this} Returns itself.\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n}\n","import { IPoint } from './IPoint';\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * An ObservablePoint is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    public cb: (this: T) => any;\n    public scope: any;\n    protected _x: number;\n    protected _y: number;\n\n    /**\n     * @param {Function} cb - callback when changed\n     * @param {object} scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overidden otherwise they will default\n     * to the clone object's values.\n     *\n     * @override\n     * @param {Function} [cb=null] - callback when changed\n     * @param {object} [scope=null] - owner of callback\n     * @return {PIXI.ObservablePoint} a copy of the point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns {this} Returns itself.\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy from.\n     * @returns {this} Returns itself.\n     */\n    copyFrom(p: IPoint): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPoint} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p: IPoint): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n","import { IPoint } from './IPoint';\nimport { Point } from './Point';\nimport { PI_2 } from './const';\nimport { Transform } from './Transform';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @class\n * @memberof PIXI\n */\nexport class Matrix\n{\n    public a: number;\n    public b: number;\n    public c: number;\n    public d: number;\n    public tx: number;\n    public ty: number;\n\n    public array: Float32Array|null = null;\n\n    /**\n     * @param {number} [a=1] - x scale\n     * @param {number} [b=0] - x skew\n     * @param {number} [c=0] - y skew\n     * @param {number} [d=1] - y scale\n     * @param {number} [tx=0] - x translation\n     * @param {number} [ty=0] - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.a = a;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.b = b;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.c = c;\n\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.d = d;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.tx = tx;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     *\n     * @param {number[]} array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * sets the matrix properties\n     *\n     * @param {number} a - Matrix component\n     * @param {number} b - Matrix component\n     * @param {number} c - Matrix component\n     * @param {number} d - Matrix component\n     * @param {number} tx - Matrix component\n     * @param {number} ty - Matrix component\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     *\n     * @param {boolean} transpose - Whether we need to transpose the matrix or not\n     * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @return {number[]} the newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     *\n     * @param {PIXI.Point} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply(pos: IPoint, newPos?: Point): Point\n    {\n        newPos = newPos || new Point();\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     *\n     * @param {PIXI.Point} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse(pos: IPoint, newPos?: Point): Point\n    {\n        newPos = newPos || new Point();\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     *\n     * @param {number} x How much to translate x by\n     * @param {number} y How much to translate y by\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     *\n     * @param {number} x The amount to scale horizontally\n     * @param {number} y The amount to scale vertically\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     *\n     * @param {number} angle - The angle in radians.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to append.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     *\n     * @param {number} x - Position on the x axis\n     * @param {number} y - Position on the y axis\n     * @param {number} pivotX - Pivot on the x axis\n     * @param {number} pivotY - Pivot on the y axis\n     * @param {number} scaleX - Scale on the x axis\n     * @param {number} scaleY - Scale on the y axis\n     * @param {number} rotation - Rotation in radians\n     * @param {number} skewX - Skew on the x axis\n     * @param {number} skewY - Skew on the y axis\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to prepend\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     *\n     * @param {PIXI.Transform} transform - The transform to apply the properties to.\n     * @return {PIXI.Transform} The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx;\n        transform.position.y = this.ty;\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     *\n     * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy to.\n     * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @return {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * A default (identity) matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     *\n     * @static\n     * @const\n     * @member {PIXI.Matrix}\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @return {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @return {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @return {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n","import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @memberof PIXI\n */\nexport class Transform\n{\n    /**\n     * A default (identity) transform\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Transform}\n     */\n    public static readonly IDENTITY = new Transform();\n\n    public worldTransform: Matrix;\n    public localTransform: Matrix;\n    public position: ObservablePoint;\n    public scale: ObservablePoint;\n    public pivot: ObservablePoint;\n    public skew: ObservablePoint;\n\n    protected _rotation: number;\n    protected _cx: number;\n    protected _sx: number;\n    protected _cy: number;\n    protected _sy: number;\n    protected _localID: number;\n    protected _currentLocalID: number;\n    protected _worldID: number;\n    protected _parentID: number;\n\n    constructor()\n    {\n        /**\n         * The world transformation matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.worldTransform = new Matrix();\n\n        /**\n         * The local transformation matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.localTransform = new Matrix();\n\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        /**\n         * The rotation amount.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._rotation = 0;\n\n        /**\n         * The X-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._cx = 1;\n\n        /**\n         * The Y-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._sx = 0;\n\n        /**\n         * The X-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._cy = 0;\n\n        /**\n         * The Y-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._sy = 1;\n\n        /**\n         * The locally unique ID of the local transform.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._localID = 0;\n\n        /**\n         * The locally unique ID of the local transform\n         * used to calculate the current local transformation matrix.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._currentLocalID = 0;\n\n        /**\n         * The locally unique ID of the world transform.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._worldID = 0;\n\n        /**\n         * The locally unique ID of the parent's world transform\n         * used to calculate the current world transformation matrix.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._parentID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @protected\n     */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /**\n     * Called when the skew or the rotation changes.\n     *\n     * @protected\n     */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    /**\n     * Updates the local transformation matrix.\n     */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     *\n     * @param {PIXI.Transform} parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n","import { SHAPES } from '../const';\n\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public readonly type: number;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Rectangle}\n     * @return {PIXI.Rectangle} An empty rectangle\n     */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.\n     * @return {PIXI.Rectangle} Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param {number} [paddingX=0] - The horizontal padding amount.\n     * @param {number} [paddingY=0] - The vertical padding amount.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n}\n","import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nexport class Circle\n{\n    public x: number;\n    public y: number;\n    public radius: number;\n    public readonly type: number;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this circle\n     * @param {number} [y=0] - The Y coordinate of the center of this circle\n     * @param {number} [radius=0] - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return {PIXI.Circle} a copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return {PIXI.Rectangle} the framing rectangle\n    */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n}\n","import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public readonly type: number;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this ellipse\n     * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n     * @param {number} [halfWidth=0] - The half width of this ellipse\n     * @param {number} [halfHeight=0] - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = halfWidth;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = halfHeight;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} a copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n}\n","import { SHAPES } from '../const';\nimport { Point } from '../Point';\n\n/**\n * A class to define a shape via user defined co-orinates.\n *\n * @class\n * @memberof PIXI\n */\nexport class Polygon\n{\n    public points: number[];\n    public closeStroke: boolean;\n    public readonly type: number;\n\n    /**\n     * @param {PIXI.Point[]|number[]|number[][]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: Point[]|number[]|number[][])\n    {\n        if (Array.isArray(points[0]))\n        {\n            points = points[0];\n        }\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (points[0] instanceof Point)\n        {\n            points = points as Point[];\n\n            const p: number[] = [];\n\n            for (let i = 0, il = points.length; i < il; i++)\n            {\n                p.push(points[i].x, points[i].y);\n            }\n\n            points = p;\n        }\n\n        /**\n         * An array of the points of this polygon\n         *\n         * @member {number[]}\n         */\n        this.points = points as number[];\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.POLY\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.POLY;\n\n        /**\n         * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n         * @member {boolean}\n         * @default true\n         */\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon\n     *\n     * @return {PIXI.Polygon} a copy of the polygon\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this polygon\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n    public radius: number;\n    public readonly type: number;\n\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [width=0] - The overall width of this rounded rectangle\n     * @param {number} [height=0] - The overall height of this rounded rectangle\n     * @param {number} [radius=20] - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = width;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = height;\n\n        /**\n         * @member {number}\n         * @default 20\n         */\n        this.radius = radius;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle\n     *\n     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)\n                || (x >= this.x + this.radius && x <= this.x + this.width - this.radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + this.radius);\n                let dy = y - (this.y + this.radius);\n                const radius2 = this.radius * this.radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"],"names":["SHAPES","x","y","this","Point","p","set","cb","scope","_x","_y","ObservablePoint","call","Object","value","PI_2","Math","PI","RAD_TO_DEG","DEG_TO_RAD","a","b","c","d","tx","ty","Matrix","array","transpose","out","Float32Array","pos","newPos","id","angle","cos","sin","a1","c1","tx1","matrix","b1","d1","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","transform","atan2","delta","abs","skew","scale","sqrt","position","n","ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","sign","i","row","push","j","_ux","_uy","_vx","_vy","k","mat","init","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","dx","dy","matrixAppendRotationInv","append","worldTransform","localTransform","onChange","pivot","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","Transform","lt","parentTransform","pt","wt","decompose","width","height","Number","type","RECT","Rectangle","rectangle","paddingX","paddingY","x1","max","x2","min","y1","y2","resolution","eps","ceil","floor","radius","CIRC","Circle","r2","halfWidth","halfHeight","ELIP","Ellipse","normx","normy","_i","points","Array","isArray","il","length","POLY","closeStroke","Polygon","polygon","slice","inside","xi","yi","xj","yj","RREC","RoundedRectangle","radius2"],"mappings":";;;;;;;oEA2BYA,eCRR,WAAYC,EAAOC,gBAAPD,kBAAOC,KAMfC,KAAKF,EAAIA,EAMTE,KAAKD,EAAIA,EAiEjB,OAzDIE,kBAAA,WAEI,OAAO,IAAIA,EAAMD,KAAKF,EAAGE,KAAKD,IASlCE,qBAAA,SAASC,GAIL,OAFAF,KAAKG,IAAID,EAAEJ,EAAGI,EAAEH,GAETC,MASXC,mBAAA,SAAyBC,GAIrB,OAFAA,EAAEC,IAAIH,KAAKF,EAAGE,KAAKD,GAEZG,GASXD,mBAAA,SAAOC,GAEH,OAAQA,EAAEJ,IAAME,KAAKF,GAAOI,EAAEH,IAAMC,KAAKD,GAW7CE,gBAAA,SAAIH,EAAOC,GAKP,oBALAD,kBAAOC,KAEPC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAEFC,wBCrEX,WAAYI,EAAsBC,EAAUP,EAAOC,gBAAPD,kBAAOC,KAE/CC,KAAKM,GAAKR,EACVE,KAAKO,GAAKR,EAEVC,KAAKI,GAAKA,EACVJ,KAAKK,MAAQA,EAqHrB,OAxGIG,kBAAA,SAAMJ,EAAcC,GAEhB,oBAFED,EAAKJ,KAAKI,iBAAIC,EAAQL,KAAKK,OAEtB,IAAIG,EAAgBJ,EAAIC,EAAOL,KAAKM,GAAIN,KAAKO,KAWxDC,gBAAA,SAAIV,EAAOC,GASP,oBATAD,kBAAOC,KAEHC,KAAKM,KAAOR,GAAKE,KAAKO,KAAOR,IAE7BC,KAAKM,GAAKR,EACVE,KAAKO,GAAKR,EACVC,KAAKI,GAAGK,KAAKT,KAAKK,QAGfL,MASXQ,qBAAA,SAASN,GASL,OAPIF,KAAKM,KAAOJ,EAAEJ,GAAKE,KAAKO,KAAOL,EAAEH,IAEjCC,KAAKM,GAAKJ,EAAEJ,EACZE,KAAKO,GAAKL,EAAEH,EACZC,KAAKI,GAAGK,KAAKT,KAAKK,QAGfL,MASXQ,mBAAA,SAAyBN,GAIrB,OAFAA,EAAEC,IAAIH,KAAKM,GAAIN,KAAKO,IAEbL,GASXM,mBAAA,SAAON,GAEH,OAAQA,EAAEJ,IAAME,KAAKM,IAAQJ,EAAEH,IAAMC,KAAKO,IAQ9CG,sBAAIF,qBAAJ,WAEI,OAAOR,KAAKM,QAGhB,SAAMK,GAEEX,KAAKM,KAAOK,IAEZX,KAAKM,GAAKK,EACVX,KAAKI,GAAGK,KAAKT,KAAKK,yCAS1BK,sBAAIF,qBAAJ,WAEI,OAAOR,KAAKO,QAGhB,SAAMI,GAEEX,KAAKO,KAAOI,IAEZX,KAAKO,GAAKI,EACVX,KAAKI,GAAGK,KAAKT,KAAKK,8CF1IjBO,EAAiB,EAAVC,KAAKC,GASZC,EAAa,IAAMF,KAAKC,GASxBE,EAAaH,KAAKC,GAAK,KAExBjB,EAAAA,WAAAA,+BAERA,mBACAA,mBACAA,mBACAA,oCGIA,WAAYoB,EAAOC,EAAOC,EAAOC,EAAOC,EAAQC,gBAApCL,kBAAOC,kBAAOC,kBAAOC,kBAAOC,kBAAQC,KAVzCtB,WAA2B,KAgB9BA,KAAKiB,EAAIA,EAMTjB,KAAKkB,EAAIA,EAMTlB,KAAKmB,EAAIA,EAMTnB,KAAKoB,EAAIA,EAMTpB,KAAKqB,GAAKA,EAMVrB,KAAKsB,GAAKA,EAoblB,OAraIC,sBAAA,SAAUC,GAENxB,KAAKiB,EAAIO,EAAM,GACfxB,KAAKkB,EAAIM,EAAM,GACfxB,KAAKmB,EAAIK,EAAM,GACfxB,KAAKoB,EAAII,EAAM,GACfxB,KAAKqB,GAAKG,EAAM,GAChBxB,KAAKsB,GAAKE,EAAM,IAepBD,gBAAA,SAAIN,EAAWC,EAAWC,EAAWC,EAAWC,EAAYC,GASxD,OAPAtB,KAAKiB,EAAIA,EACTjB,KAAKkB,EAAIA,EACTlB,KAAKmB,EAAIA,EACTnB,KAAKoB,EAAIA,EACTpB,KAAKqB,GAAKA,EACVrB,KAAKsB,GAAKA,EAEHtB,MAUXuB,oBAAA,SAAQE,EAAoBC,GAEnB1B,KAAKwB,QAENxB,KAAKwB,MAAQ,IAAIG,aAAa,IAGlC,IAAMH,EAAQE,GAAO1B,KAAKwB,MA2B1B,OAzBIC,GAEAD,EAAM,GAAKxB,KAAKiB,EAChBO,EAAM,GAAKxB,KAAKkB,EAChBM,EAAM,GAAK,EACXA,EAAM,GAAKxB,KAAKmB,EAChBK,EAAM,GAAKxB,KAAKoB,EAChBI,EAAM,GAAK,EACXA,EAAM,GAAKxB,KAAKqB,GAChBG,EAAM,GAAKxB,KAAKsB,GAChBE,EAAM,GAAK,IAIXA,EAAM,GAAKxB,KAAKiB,EAChBO,EAAM,GAAKxB,KAAKmB,EAChBK,EAAM,GAAKxB,KAAKqB,GAChBG,EAAM,GAAKxB,KAAKkB,EAChBM,EAAM,GAAKxB,KAAKoB,EAChBI,EAAM,GAAKxB,KAAKsB,GAChBE,EAAM,GAAK,EACXA,EAAM,GAAK,EACXA,EAAM,GAAK,GAGRA,GAWXD,kBAAA,SAAMK,EAAaC,GAEfA,EAASA,GAAU,IAAI5B,EAEvB,IAAMH,EAAI8B,EAAI9B,EACRC,EAAI6B,EAAI7B,EAKd,OAHA8B,EAAO/B,EAAKE,KAAKiB,EAAInB,EAAME,KAAKmB,EAAIpB,EAAKC,KAAKqB,GAC9CQ,EAAO9B,EAAKC,KAAKkB,EAAIpB,EAAME,KAAKoB,EAAIrB,EAAKC,KAAKsB,GAEvCO,GAWXN,yBAAA,SAAaK,EAAaC,GAEtBA,EAASA,GAAU,IAAI5B,EAEvB,IAAM6B,EAAK,GAAM9B,KAAKiB,EAAIjB,KAAKoB,EAAMpB,KAAKmB,GAAKnB,KAAKkB,GAE9CpB,EAAI8B,EAAI9B,EACRC,EAAI6B,EAAI7B,EAKd,OAHA8B,EAAO/B,EAAKE,KAAKoB,EAAIU,EAAKhC,GAAOE,KAAKmB,EAAIW,EAAK/B,GAAQC,KAAKsB,GAAKtB,KAAKmB,EAAMnB,KAAKqB,GAAKrB,KAAKoB,GAAMU,EACjGD,EAAO9B,EAAKC,KAAKiB,EAAIa,EAAK/B,GAAOC,KAAKkB,EAAIY,EAAKhC,IAASE,KAAKsB,GAAKtB,KAAKiB,EAAMjB,KAAKqB,GAAKrB,KAAKkB,GAAMY,EAE3FD,GAUXN,sBAAA,SAAUzB,EAAWC,GAKjB,OAHAC,KAAKqB,IAAMvB,EACXE,KAAKsB,IAAMvB,EAEJC,MAUXuB,kBAAA,SAAMzB,EAAWC,GASb,OAPAC,KAAKiB,GAAKnB,EACVE,KAAKoB,GAAKrB,EACVC,KAAKmB,GAAKrB,EACVE,KAAKkB,GAAKnB,EACVC,KAAKqB,IAAMvB,EACXE,KAAKsB,IAAMvB,EAEJC,MASXuB,mBAAA,SAAOQ,GAEH,IAAMC,EAAMnB,KAAKmB,IAAID,GACfE,EAAMpB,KAAKoB,IAAIF,GAEfG,EAAKlC,KAAKiB,EACVkB,EAAKnC,KAAKmB,EACViB,EAAMpC,KAAKqB,GASjB,OAPArB,KAAKiB,EAAKiB,EAAKF,EAAQhC,KAAKkB,EAAIe,EAChCjC,KAAKkB,EAAKgB,EAAKD,EAAQjC,KAAKkB,EAAIc,EAChChC,KAAKmB,EAAKgB,EAAKH,EAAQhC,KAAKoB,EAAIa,EAChCjC,KAAKoB,EAAKe,EAAKF,EAAQjC,KAAKoB,EAAIY,EAChChC,KAAKqB,GAAMe,EAAMJ,EAAQhC,KAAKsB,GAAKW,EACnCjC,KAAKsB,GAAMc,EAAMH,EAAQjC,KAAKsB,GAAKU,EAE5BhC,MASXuB,mBAAA,SAAOc,GAEH,IAAMH,EAAKlC,KAAKiB,EACVqB,EAAKtC,KAAKkB,EACViB,EAAKnC,KAAKmB,EACVoB,EAAKvC,KAAKoB,EAUhB,OARApB,KAAKiB,EAAKoB,EAAOpB,EAAIiB,EAAOG,EAAOnB,EAAIiB,EACvCnC,KAAKkB,EAAKmB,EAAOpB,EAAIqB,EAAOD,EAAOnB,EAAIqB,EACvCvC,KAAKmB,EAAKkB,EAAOlB,EAAIe,EAAOG,EAAOjB,EAAIe,EACvCnC,KAAKoB,EAAKiB,EAAOlB,EAAImB,EAAOD,EAAOjB,EAAImB,EAEvCvC,KAAKqB,GAAMgB,EAAOhB,GAAKa,EAAOG,EAAOf,GAAKa,EAAMnC,KAAKqB,GACrDrB,KAAKsB,GAAMe,EAAOhB,GAAKiB,EAAOD,EAAOf,GAAKiB,EAAMvC,KAAKsB,GAE9CtB,MAiBXuB,yBAAA,SAAazB,EAAWC,EAAWyC,EAAgBC,EAAgBC,EAC/DC,EAAgBC,EAAkBC,EAAeC,GAUjD,OARA9C,KAAKiB,EAAIJ,KAAKmB,IAAIY,EAAWE,GAASJ,EACtC1C,KAAKkB,EAAIL,KAAKoB,IAAIW,EAAWE,GAASJ,EACtC1C,KAAKmB,GAAKN,KAAKoB,IAAIW,EAAWC,GAASF,EACvC3C,KAAKoB,EAAIP,KAAKmB,IAAIY,EAAWC,GAASF,EAEtC3C,KAAKqB,GAAKvB,GAAM0C,EAASxC,KAAKiB,EAAMwB,EAASzC,KAAKmB,GAClDnB,KAAKsB,GAAKvB,GAAMyC,EAASxC,KAAKkB,EAAMuB,EAASzC,KAAKoB,GAE3CpB,MASXuB,oBAAA,SAAQc,GAEJ,IAAMD,EAAMpC,KAAKqB,GAEjB,GAAiB,IAAbgB,EAAOpB,GAAwB,IAAboB,EAAOnB,GAAwB,IAAbmB,EAAOlB,GAAwB,IAAbkB,EAAOjB,EACjE,CACI,IAAMc,EAAKlC,KAAKiB,EACVkB,EAAKnC,KAAKmB,EAEhBnB,KAAKiB,EAAKiB,EAAKG,EAAOpB,EAAMjB,KAAKkB,EAAImB,EAAOlB,EAC5CnB,KAAKkB,EAAKgB,EAAKG,EAAOnB,EAAMlB,KAAKkB,EAAImB,EAAOjB,EAC5CpB,KAAKmB,EAAKgB,EAAKE,EAAOpB,EAAMjB,KAAKoB,EAAIiB,EAAOlB,EAC5CnB,KAAKoB,EAAKe,EAAKE,EAAOnB,EAAMlB,KAAKoB,EAAIiB,EAAOjB,EAMhD,OAHApB,KAAKqB,GAAMe,EAAMC,EAAOpB,EAAMjB,KAAKsB,GAAKe,EAAOlB,EAAKkB,EAAOhB,GAC3DrB,KAAKsB,GAAMc,EAAMC,EAAOnB,EAAMlB,KAAKsB,GAAKe,EAAOjB,EAAKiB,EAAOf,GAEpDtB,MASXuB,sBAAA,SAAUwB,GAGN,IAAM9B,EAAIjB,KAAKiB,EACTC,EAAIlB,KAAKkB,EACTC,EAAInB,KAAKmB,EACTC,EAAIpB,KAAKoB,EAETyB,GAAShC,KAAKmC,OAAO7B,EAAGC,GACxB0B,EAAQjC,KAAKmC,MAAM9B,EAAGD,GAEtBgC,EAAQpC,KAAKqC,IAAIL,EAAQC,GAsB/B,OApBIG,EAAQ,MAAWpC,KAAKqC,IAAItC,EAAOqC,GAAS,MAE5CF,EAAUH,SAAWE,EACrBC,EAAUI,KAAKrD,EAAIiD,EAAUI,KAAKpD,EAAI,IAItCgD,EAAUH,SAAW,EACrBG,EAAUI,KAAKrD,EAAI+C,EACnBE,EAAUI,KAAKpD,EAAI+C,GAIvBC,EAAUK,MAAMtD,EAAIe,KAAKwC,KAAMpC,EAAIA,EAAMC,EAAIA,GAC7C6B,EAAUK,MAAMrD,EAAIc,KAAKwC,KAAMlC,EAAIA,EAAMC,EAAIA,GAG7C2B,EAAUO,SAASxD,EAAIE,KAAKqB,GAC5B0B,EAAUO,SAASvD,EAAIC,KAAKsB,GAErByB,GAQXxB,mBAAA,WAEI,IAAMW,EAAKlC,KAAKiB,EACVqB,EAAKtC,KAAKkB,EACViB,EAAKnC,KAAKmB,EACVoB,EAAKvC,KAAKoB,EACVgB,EAAMpC,KAAKqB,GACXkC,EAAKrB,EAAKK,EAAOD,EAAKH,EAS5B,OAPAnC,KAAKiB,EAAIsB,EAAKgB,EACdvD,KAAKkB,GAAKoB,EAAKiB,EACfvD,KAAKmB,GAAKgB,EAAKoB,EACfvD,KAAKoB,EAAIc,EAAKqB,EACdvD,KAAKqB,IAAOc,EAAKnC,KAAKsB,GAAOiB,EAAKH,GAAQmB,EAC1CvD,KAAKsB,KAAQY,EAAKlC,KAAKsB,GAAOgB,EAAKF,GAAQmB,EAEpCvD,MAQXuB,qBAAA,WASI,OAPAvB,KAAKiB,EAAI,EACTjB,KAAKkB,EAAI,EACTlB,KAAKmB,EAAI,EACTnB,KAAKoB,EAAI,EACTpB,KAAKqB,GAAK,EACVrB,KAAKsB,GAAK,EAEHtB,MAQXuB,kBAAA,WAEI,IAAMc,EAAS,IAAId,EASnB,OAPAc,EAAOpB,EAAIjB,KAAKiB,EAChBoB,EAAOnB,EAAIlB,KAAKkB,EAChBmB,EAAOlB,EAAInB,KAAKmB,EAChBkB,EAAOjB,EAAIpB,KAAKoB,EAChBiB,EAAOhB,GAAKrB,KAAKqB,GACjBgB,EAAOf,GAAKtB,KAAKsB,GAEVe,GASXd,mBAAA,SAAOc,GASH,OAPAA,EAAOpB,EAAIjB,KAAKiB,EAChBoB,EAAOnB,EAAIlB,KAAKkB,EAChBmB,EAAOlB,EAAInB,KAAKmB,EAChBkB,EAAOjB,EAAIpB,KAAKoB,EAChBiB,EAAOhB,GAAKrB,KAAKqB,GACjBgB,EAAOf,GAAKtB,KAAKsB,GAEVe,GASXd,qBAAA,SAASc,GASL,OAPArC,KAAKiB,EAAIoB,EAAOpB,EAChBjB,KAAKkB,EAAImB,EAAOnB,EAChBlB,KAAKmB,EAAIkB,EAAOlB,EAChBnB,KAAKoB,EAAIiB,EAAOjB,EAChBpB,KAAKqB,GAAKgB,EAAOhB,GACjBrB,KAAKsB,GAAKe,EAAOf,GAEVtB,MAUXU,sBAAWa,kBAAX,WAEI,OAAO,IAAIA,mCAUfb,sBAAWa,qBAAX,WAEI,OAAO,IAAIA,wCC7ebiC,EAAK,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GACzDC,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACzDC,EAAK,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GACzDC,EAAK,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GASzDC,EAA6B,GAQ7BC,EAA6B,GAK7BC,EAASjD,KAAKkD,MAMpB,WAEI,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACxB,CACI,IAAMC,EAAgB,GAEtBL,EAAeM,KAAKD,GAEpB,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IASpB,IANA,IAAMC,EAAMN,EAAQN,EAAGQ,GAAKR,EAAGW,GAAOT,EAAGM,GAAKP,EAAGU,IAC3CE,EAAMP,EAAQL,EAAGO,GAAKR,EAAGW,GAAOR,EAAGK,GAAKP,EAAGU,IAC3CG,EAAMR,EAAQN,EAAGQ,GAAKN,EAAGS,GAAOT,EAAGM,GAAKL,EAAGQ,IAC3CI,EAAMT,EAAQL,EAAGO,GAAKN,EAAGS,GAAOR,EAAGK,GAAKL,EAAGQ,IAGxCK,EAAI,EAAGA,EAAI,GAAIA,IAEpB,GAAIhB,EAAGgB,KAAOJ,GAAOX,EAAGe,KAAOH,GACtBX,EAAGc,KAAOF,GAAOX,EAAGa,KAAOD,EACpC,CACIN,EAAIC,KAAKM,GACT,OAMhB,IAASR,EAAI,EAAGA,EAAI,GAAIA,IACxB,CACI,IAAMS,EAAM,IAAIlD,EAEhBkD,EAAItE,IAAIqD,EAAGQ,GAAIP,EAAGO,GAAIN,EAAGM,GAAIL,EAAGK,GAAI,EAAG,GACvCH,EAAiBK,KAAKO,IAI9BC,OAkCaC,EAAU,CASnBC,EAAG,EAUHC,GAAI,EAUJC,EAAG,EAUHC,GAAI,EAUJC,EAAG,EAUHC,GAAI,EAUJC,EAAG,EAUHC,GAAI,EAQJC,gBAAiB,EAQjBC,cAAe,GAQfC,kBAAmB,GAQnBC,iBAAkB,GAQlBC,GAAI,SAACC,GAAkC,OAAAjC,EAAGiC,IAQ1CC,GAAI,SAACD,GAAkC,OAAAhC,EAAGgC,IAQ1CE,GAAI,SAACF,GAAkC,OAAA/B,EAAG+B,IAQ1CG,GAAI,SAACH,GAAkC,OAAA9B,EAAG8B,IAS1CI,IAAK,SAACjD,GAEF,OAAe,EAAXA,EAEkB,GAAXA,EAGU,GAAZA,GA2BbkD,IAAK,SAACC,EAA6BC,GAA4C,OAC3EpC,EAAemC,GAAgBC,IAWnCC,IAAK,SAACF,EAA6BC,GAA4C,OAC3EpC,EAAemC,GAAgBpB,EAAQkB,IAAIG,KAW/CE,UAAW,SAACtD,GAA6B,OAAW,EAAXA,GAUzCuD,WAAY,SAACvD,GAAmC,OAAmB,IAAP,EAAXA,IAYjDwD,YAAa,SAACC,EAAYC,GAEtB,OAAmB,EAAfzF,KAAKqC,IAAImD,IAAWxF,KAAKqC,IAAIoD,GAEzBA,GAAM,EAEC3B,EAAQG,EAGZH,EAAQO,EAEK,EAAfrE,KAAKqC,IAAIoD,IAAWzF,KAAKqC,IAAImD,GAE9BA,EAAK,EAEE1B,EAAQC,EAGZD,EAAQK,EAEVsB,EAAK,EAEND,EAAK,EAEE1B,EAAQE,GAGZF,EAAQI,GAEVsB,EAAK,EAEH1B,EAAQQ,GAGZR,EAAQM,IAYnBsB,wBAAyB,SAAClE,EAAgBO,EAAuBvB,EAAQC,gBAARD,kBAAQC,KAGrE,IAAMmD,EAAcZ,EAAiBc,EAAQkB,IAAIjD,IAEjD6B,EAAIpD,GAAKA,EACToD,EAAInD,GAAKA,EACTe,EAAOmE,OAAO/B,kBC5WlB,aAOIzE,KAAKyG,eAAiB,IAAIlF,EAO1BvB,KAAK0G,eAAiB,IAAInF,EAO1BvB,KAAKsD,SAAW,IAAI9C,EAAgBR,KAAK2G,SAAU3G,KAAM,EAAG,GAO5DA,KAAKoD,MAAQ,IAAI5C,EAAgBR,KAAK2G,SAAU3G,KAAM,EAAG,GAOzDA,KAAK4G,MAAQ,IAAIpG,EAAgBR,KAAK2G,SAAU3G,KAAM,EAAG,GAOzDA,KAAKmD,KAAO,IAAI3C,EAAgBR,KAAK6G,WAAY7G,KAAM,EAAG,GAQ1DA,KAAK8G,UAAY,EASjB9G,KAAK+G,IAAM,EASX/G,KAAKgH,IAAM,EASXhH,KAAKiH,IAAM,EASXjH,KAAKkH,IAAM,EAQXlH,KAAKmH,SAAW,EAShBnH,KAAKoH,gBAAkB,EAQvBpH,KAAKqH,SAAW,EAShBrH,KAAKsH,UAAY,EA8HzB,OAtHcC,qBAAV,WAEIvH,KAAKmH,YAQCI,uBAAV,WAEIvH,KAAK+G,IAAMlG,KAAKmB,IAAIhC,KAAK8G,UAAY9G,KAAKmD,KAAKpD,GAC/CC,KAAKgH,IAAMnG,KAAKoB,IAAIjC,KAAK8G,UAAY9G,KAAKmD,KAAKpD,GAC/CC,KAAKiH,KAAOpG,KAAKoB,IAAIjC,KAAK8G,UAAY9G,KAAKmD,KAAKrD,GAChDE,KAAKkH,IAAMrG,KAAKmB,IAAIhC,KAAK8G,UAAY9G,KAAKmD,KAAKrD,GAE/CE,KAAKmH,YAMTI,iCAAA,WAEI,IAAMC,EAAKxH,KAAK0G,eAEZ1G,KAAKmH,WAAanH,KAAKoH,kBAGvBI,EAAGvG,EAAIjB,KAAK+G,IAAM/G,KAAKoD,MAAMtD,EAC7B0H,EAAGtG,EAAIlB,KAAKgH,IAAMhH,KAAKoD,MAAMtD,EAC7B0H,EAAGrG,EAAInB,KAAKiH,IAAMjH,KAAKoD,MAAMrD,EAC7ByH,EAAGpG,EAAIpB,KAAKkH,IAAMlH,KAAKoD,MAAMrD,EAE7ByH,EAAGnG,GAAKrB,KAAKsD,SAASxD,GAAME,KAAK4G,MAAM9G,EAAI0H,EAAGvG,EAAMjB,KAAK4G,MAAM7G,EAAIyH,EAAGrG,GACtEqG,EAAGlG,GAAKtB,KAAKsD,SAASvD,GAAMC,KAAK4G,MAAM9G,EAAI0H,EAAGtG,EAAMlB,KAAK4G,MAAM7G,EAAIyH,EAAGpG,GACtEpB,KAAKoH,gBAAkBpH,KAAKmH,SAG5BnH,KAAKsH,WAAa,IAS1BC,4BAAA,SAAgBE,GAEZ,IAAMD,EAAKxH,KAAK0G,eAkBhB,GAhBI1G,KAAKmH,WAAanH,KAAKoH,kBAGvBI,EAAGvG,EAAIjB,KAAK+G,IAAM/G,KAAKoD,MAAMtD,EAC7B0H,EAAGtG,EAAIlB,KAAKgH,IAAMhH,KAAKoD,MAAMtD,EAC7B0H,EAAGrG,EAAInB,KAAKiH,IAAMjH,KAAKoD,MAAMrD,EAC7ByH,EAAGpG,EAAIpB,KAAKkH,IAAMlH,KAAKoD,MAAMrD,EAE7ByH,EAAGnG,GAAKrB,KAAKsD,SAASxD,GAAME,KAAK4G,MAAM9G,EAAI0H,EAAGvG,EAAMjB,KAAK4G,MAAM7G,EAAIyH,EAAGrG,GACtEqG,EAAGlG,GAAKtB,KAAKsD,SAASvD,GAAMC,KAAK4G,MAAM9G,EAAI0H,EAAGtG,EAAMlB,KAAK4G,MAAM7G,EAAIyH,EAAGpG,GACtEpB,KAAKoH,gBAAkBpH,KAAKmH,SAG5BnH,KAAKsH,WAAa,GAGlBtH,KAAKsH,YAAcG,EAAgBJ,SACvC,CAEI,IAAMK,EAAKD,EAAgBhB,eACrBkB,EAAK3H,KAAKyG,eAEhBkB,EAAG1G,EAAKuG,EAAGvG,EAAIyG,EAAGzG,EAAMuG,EAAGtG,EAAIwG,EAAGvG,EAClCwG,EAAGzG,EAAKsG,EAAGvG,EAAIyG,EAAGxG,EAAMsG,EAAGtG,EAAIwG,EAAGtG,EAClCuG,EAAGxG,EAAKqG,EAAGrG,EAAIuG,EAAGzG,EAAMuG,EAAGpG,EAAIsG,EAAGvG,EAClCwG,EAAGvG,EAAKoG,EAAGrG,EAAIuG,EAAGxG,EAAMsG,EAAGpG,EAAIsG,EAAGtG,EAClCuG,EAAGtG,GAAMmG,EAAGnG,GAAKqG,EAAGzG,EAAMuG,EAAGlG,GAAKoG,EAAGvG,EAAKuG,EAAGrG,GAC7CsG,EAAGrG,GAAMkG,EAAGnG,GAAKqG,EAAGxG,EAAMsG,EAAGlG,GAAKoG,EAAGtG,EAAKsG,EAAGpG,GAE7CtB,KAAKsH,UAAYG,EAAgBJ,SAGjCrH,KAAKqH,aASbE,0BAAA,SAAclF,GAEVA,EAAOuF,UAAU5H,MACjBA,KAAKmH,YAQTzG,sBAAI6G,4BAAJ,WAEI,OAAOvH,KAAK8G,eAGhB,SAAanG,GAELX,KAAK8G,YAAcnG,IAEnBX,KAAK8G,UAAYnG,EACjBX,KAAK6G,+CAtQUU,WAAW,IAAIA,oBCctC,WAAYzH,EAAOC,EAAO8H,EAAWC,gBAAzBhI,kBAAOC,kBAAO8H,kBAAWC,KAMjC9H,KAAKF,EAAIiI,OAAOjI,GAMhBE,KAAKD,EAAIgI,OAAOhI,GAMhBC,KAAK6H,MAAQE,OAAOF,GAMpB7H,KAAK8H,OAASC,OAAOD,GAUrB9H,KAAKgI,KAAOnI,SAAOoI,KA4M3B,OApMIvH,sBAAIwH,wBAAJ,WAEI,OAAOlI,KAAKF,mCAQhBY,sBAAIwH,yBAAJ,WAEI,OAAOlI,KAAKF,EAAIE,KAAK6H,uCAQzBnH,sBAAIwH,uBAAJ,WAEI,OAAOlI,KAAKD,mCAQhBW,sBAAIwH,0BAAJ,WAEI,OAAOlI,KAAKD,EAAIC,KAAK8H,wCAWzBpH,sBAAWwH,eAAX,WAEI,OAAO,IAAIA,EAAU,EAAG,EAAG,EAAG,oCAQlCA,kBAAA,WAEI,OAAO,IAAIA,EAAUlI,KAAKF,EAAGE,KAAKD,EAAGC,KAAK6H,MAAO7H,KAAK8H,SAS1DI,qBAAA,SAASC,GAOL,OALAnI,KAAKF,EAAIqI,EAAUrI,EACnBE,KAAKD,EAAIoI,EAAUpI,EACnBC,KAAK6H,MAAQM,EAAUN,MACvB7H,KAAK8H,OAASK,EAAUL,OAEjB9H,MASXkI,mBAAA,SAAOC,GAOH,OALAA,EAAUrI,EAAIE,KAAKF,EACnBqI,EAAUpI,EAAIC,KAAKD,EACnBoI,EAAUN,MAAQ7H,KAAK6H,MACvBM,EAAUL,OAAS9H,KAAK8H,OAEjBK,GAUXD,qBAAA,SAASpI,EAAWC,GAEhB,QAAIC,KAAK6H,OAAS,GAAK7H,KAAK8H,QAAU,KAKlChI,GAAKE,KAAKF,GAAKA,EAAIE,KAAKF,EAAIE,KAAK6H,OAE7B9H,GAAKC,KAAKD,GAAKA,EAAIC,KAAKD,EAAIC,KAAK8H,SAiB7CI,gBAAA,SAAIE,EAAcC,GAQd,oBARAD,kBAAcC,KAEdrI,KAAKF,GAAKsI,EACVpI,KAAKD,GAAKsI,EAEVrI,KAAK6H,OAAoB,EAAXO,EACdpI,KAAK8H,QAAqB,EAAXO,EAERrI,MASXkI,gBAAA,SAAIC,GAEA,IAAMG,EAAKzH,KAAK0H,IAAIvI,KAAKF,EAAGqI,EAAUrI,GAChC0I,EAAK3H,KAAK4H,IAAIzI,KAAKF,EAAIE,KAAK6H,MAAOM,EAAUrI,EAAIqI,EAAUN,OAC3Da,EAAK7H,KAAK0H,IAAIvI,KAAKD,EAAGoI,EAAUpI,GAChC4I,EAAK9H,KAAK4H,IAAIzI,KAAKD,EAAIC,KAAK8H,OAAQK,EAAUpI,EAAIoI,EAAUL,QAOlE,OALA9H,KAAKF,EAAIwI,EACTtI,KAAK6H,MAAQhH,KAAK0H,IAAIC,EAAKF,EAAI,GAC/BtI,KAAKD,EAAI2I,EACT1I,KAAK8H,OAASjH,KAAK0H,IAAII,EAAKD,EAAI,GAEzB1I,MAUXkI,iBAAA,SAAKU,EAAgBC,gBAAhBD,kBAAgBC,QAEjB,IAAML,EAAK3H,KAAKiI,MAAM9I,KAAKF,EAAIE,KAAK6H,MAAQgB,GAAOD,GAAcA,EAC3DD,EAAK9H,KAAKiI,MAAM9I,KAAKD,EAAIC,KAAK8H,OAASe,GAAOD,GAAcA,EAQlE,OANA5I,KAAKF,EAAIe,KAAKkI,OAAO/I,KAAKF,EAAI+I,GAAOD,GAAcA,EACnD5I,KAAKD,EAAIc,KAAKkI,OAAO/I,KAAKD,EAAI8I,GAAOD,GAAcA,EAEnD5I,KAAK6H,MAAQW,EAAKxI,KAAKF,EACvBE,KAAK8H,OAASa,EAAK3I,KAAKD,EAEjBC,MASXkI,oBAAA,SAAQC,GAEJ,IAAMG,EAAKzH,KAAK4H,IAAIzI,KAAKF,EAAGqI,EAAUrI,GAChC0I,EAAK3H,KAAK0H,IAAIvI,KAAKF,EAAIE,KAAK6H,MAAOM,EAAUrI,EAAIqI,EAAUN,OAC3Da,EAAK7H,KAAK4H,IAAIzI,KAAKD,EAAGoI,EAAUpI,GAChC4I,EAAK9H,KAAK0H,IAAIvI,KAAKD,EAAIC,KAAK8H,OAAQK,EAAUpI,EAAIoI,EAAUL,QAOlE,OALA9H,KAAKF,EAAIwI,EACTtI,KAAK6H,MAAQW,EAAKF,EAClBtI,KAAKD,EAAI2I,EACT1I,KAAK8H,OAASa,EAAKD,EAEZ1I,wBCvPX,WAAYF,EAAOC,EAAOiJ,gBAAdlJ,kBAAOC,kBAAOiJ,KAMtBhJ,KAAKF,EAAIA,EAMTE,KAAKD,EAAIA,EAMTC,KAAKgJ,OAASA,EAUdhJ,KAAKgI,KAAOnI,SAAOoJ,KA8C3B,OAtCIC,kBAAA,WAEI,OAAO,IAAIA,EAAOlJ,KAAKF,EAAGE,KAAKD,EAAGC,KAAKgJ,SAU3CE,qBAAA,SAASpJ,EAAWC,GAEhB,GAAIC,KAAKgJ,QAAU,EAEf,OAAO,EAGX,IAAMG,EAAKnJ,KAAKgJ,OAAShJ,KAAKgJ,OAC1B3C,EAAMrG,KAAKF,EAAIA,EACfwG,EAAMtG,KAAKD,EAAIA,EAKnB,OAHAsG,GAAMA,IACNC,GAAMA,IAEa6C,GAQvBD,sBAAA,WAEI,OAAO,IAAIhB,EAAUlI,KAAKF,EAAIE,KAAKgJ,OAAQhJ,KAAKD,EAAIC,KAAKgJ,OAAsB,EAAdhJ,KAAKgJ,OAA0B,EAAdhJ,KAAKgJ,2BCtE3F,WAAYlJ,EAAOC,EAAOqJ,EAAeC,gBAA7BvJ,kBAAOC,kBAAOqJ,kBAAeC,KAMrCrJ,KAAKF,EAAIA,EAMTE,KAAKD,EAAIA,EAMTC,KAAK6H,MAAQuB,EAMbpJ,KAAK8H,OAASuB,EAUdrJ,KAAKgI,KAAOnI,SAAOyJ,KA8C3B,OAtCIC,kBAAA,WAEI,OAAO,IAAIA,EAAQvJ,KAAKF,EAAGE,KAAKD,EAAGC,KAAK6H,MAAO7H,KAAK8H,SAUxDyB,qBAAA,SAASzJ,EAAWC,GAEhB,GAAIC,KAAK6H,OAAS,GAAK7H,KAAK8H,QAAU,EAElC,OAAO,EAIX,IAAI0B,GAAU1J,EAAIE,KAAKF,GAAKE,KAAK6H,MAC7B4B,GAAU1J,EAAIC,KAAKD,GAAKC,KAAK8H,OAKjC,OAHA0B,GAASA,IACTC,GAASA,IAEgB,GAQ7BF,sBAAA,WAEI,OAAO,IAAIrB,EAAUlI,KAAKF,EAAIE,KAAK6H,MAAO7H,KAAKD,EAAIC,KAAK8H,OAAQ9H,KAAK6H,MAAO7H,KAAK8H,2BC/ErF,0CAAY4B,mBAAAA,IAAAC,UAQR,GANIC,MAAMC,QAAQF,EAAO,MAErBA,EAASA,EAAO,IAIhBA,EAAO,aAAc1J,EACzB,CAKI,IAFA,IAAMC,EAAc,GAEX8D,EAAI,EAAG8F,GAJhBH,EAASA,GAImBI,OAAQ/F,EAAI8F,EAAI9F,IAExC9D,EAAEgE,KAAKyF,EAAO3F,GAAGlE,EAAG6J,EAAO3F,GAAGjE,GAGlC4J,EAASzJ,EAQbF,KAAK2J,OAASA,EAUd3J,KAAKgI,KAAOnI,SAAOmK,KAOnBhK,KAAKiK,aAAc,EAiD3B,OAzCIC,kBAAA,WAEI,IACMC,EAAU,IAAID,EADLlK,KAAK2J,OAAOS,SAK3B,OAFAD,EAAQF,YAAcjK,KAAKiK,YAEpBE,GAUXD,qBAAA,SAASpK,EAAWC,GAQhB,IANA,IAAIsK,GAAS,EAIPN,EAAS/J,KAAK2J,OAAOI,OAAS,EAE3B/F,EAAI,EAAGG,EAAI4F,EAAS,EAAG/F,EAAI+F,EAAQ5F,EAAIH,IAChD,CACI,IAAMsG,EAAKtK,KAAK2J,OAAW,EAAJ3F,GACjBuG,EAAKvK,KAAK2J,OAAY,EAAJ3F,EAAS,GAC3BwG,EAAKxK,KAAK2J,OAAW,EAAJxF,GACjBsG,EAAKzK,KAAK2J,OAAY,EAAJxF,EAAS,GACboG,EAAKxK,GAAQ0K,EAAK1K,GAAQD,GAAmBC,EAAIwK,IAAOE,EAAKF,IAA7BC,EAAKF,GAAgCA,IAIrFD,GAAUA,GAIlB,OAAOA,qBCxFX,WAAYvK,EAAOC,EAAO8H,EAAWC,EAAYkB,gBAArClJ,kBAAOC,kBAAO8H,kBAAWC,kBAAYkB,MAM7ChJ,KAAKF,EAAIA,EAMTE,KAAKD,EAAIA,EAMTC,KAAK6H,MAAQA,EAMb7H,KAAK8H,OAASA,EAMd9H,KAAKgJ,OAASA,EAUdhJ,KAAKgI,KAAOnI,SAAO6K,KA+D3B,OAvDIC,kBAAA,WAEI,OAAO,IAAIA,EAAiB3K,KAAKF,EAAGE,KAAKD,EAAGC,KAAK6H,MAAO7H,KAAK8H,OAAQ9H,KAAKgJ,SAU9E2B,qBAAA,SAAS7K,EAAWC,GAEhB,GAAIC,KAAK6H,OAAS,GAAK7H,KAAK8H,QAAU,EAElC,OAAO,EAEX,GAAIhI,GAAKE,KAAKF,GAAKA,GAAKE,KAAKF,EAAIE,KAAK6H,OAE9B9H,GAAKC,KAAKD,GAAKA,GAAKC,KAAKD,EAAIC,KAAK8H,OACtC,CACI,GAAK/H,GAAKC,KAAKD,EAAIC,KAAKgJ,QAAUjJ,GAAKC,KAAKD,EAAIC,KAAK8H,OAAS9H,KAAKgJ,QAC/DlJ,GAAKE,KAAKF,EAAIE,KAAKgJ,QAAUlJ,GAAKE,KAAKF,EAAIE,KAAK6H,MAAQ7H,KAAKgJ,OAE7D,OAAO,EAEX,IAAI3C,EAAKvG,GAAKE,KAAKF,EAAIE,KAAKgJ,QACxB1C,EAAKvG,GAAKC,KAAKD,EAAIC,KAAKgJ,QACtB4B,EAAU5K,KAAKgJ,OAAShJ,KAAKgJ,OAEnC,GAAK3C,EAAKA,EAAOC,EAAKA,GAAOsE,EAEzB,OAAO,EAGX,IADAvE,EAAKvG,GAAKE,KAAKF,EAAIE,KAAK6H,MAAQ7H,KAAKgJ,SAC3B3C,EAAOC,EAAKA,GAAOsE,EAEzB,OAAO,EAGX,GAAKvE,EAAKA,GADVC,EAAKvG,GAAKC,KAAKD,EAAIC,KAAK8H,OAAS9H,KAAKgJ,SAChB1C,GAAOsE,EAEzB,OAAO,EAGX,IADAvE,EAAKvG,GAAKE,KAAKF,EAAIE,KAAKgJ,SACd3C,EAAOC,EAAKA,GAAOsE,EAEzB,OAAO,EAKnB,OAAO"}