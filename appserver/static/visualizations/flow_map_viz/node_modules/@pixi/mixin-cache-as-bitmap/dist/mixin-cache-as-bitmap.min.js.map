{"version":3,"file":"mixin-cache-as-bitmap.min.js","sources":["../src/index.js"],"sourcesContent":["import { Texture, BaseTexture, RenderTexture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false;\n\n// figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nclass CacheData\n{\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalHitTest = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get()\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value)\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = this.getLocalBounds().clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame;\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    m.tx = -bounds.x;\n    m.ty = -bounds.y;\n\n    // reset\n    this.transform.worldTransform.identity();\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, renderTexture, true, m, true);\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = this.getLocalBounds();\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    // renderTexture.render(this, m, true);\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds()\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite._calculateBounds();\n    this._lastBoundsID = this._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds()\n{\n    return this._cacheData.sprite.getLocalBounds();\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject()\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options)\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"names":["const","_tempMatrix","Matrix","prototype","_cacheAsBitmap","_cacheData","CacheData","this","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalHitTest","originalDestroy","originalMask","originalFilterArea","sprite","Object","defineProperties","DisplayObject","cacheAsBitmap","get","set","value","let","data","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","originalContainsPoint","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","uid","BaseTexture","addToCache","baseTexture","Texture","m","tx","x","ty","y","worldTransform","identity","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","anchor","_bounds","_parentID","parent","_tempDisplayObjectParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","localTransform","copyTo","invert","clear","_calculateBounds","_lastBoundsID","_boundsID","_texture","removeFromCache","options"],"mappings":"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"}