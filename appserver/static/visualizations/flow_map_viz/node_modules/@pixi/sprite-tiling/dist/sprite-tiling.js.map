{"version":3,"file":"sprite-tiling.js","sources":["../src/TilingSprite.js","../src/TilingSpriteRenderer.js"],"sourcesContent":["import { TextureMatrix, Texture } from '@pixi/core';\nimport { Point, Rectangle, Transform } from '@pixi/math';\nimport { TextureCache } from '@pixi/utils';\nimport { Sprite } from '@pixi/sprite';\n\nconst tempPoint = new Point();\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    /**\n     * @param {PIXI.Texture} texture - the texture of the tiling sprite\n     * @param {number} [width=100] - the width of the tiling sprite\n     * @param {number} [height=100] - the height of the tiling sprite\n     */\n    constructor(texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        /**\n         * Tile transform\n         *\n         * @member {PIXI.Transform}\n         */\n        this.tileTransform = new Transform();\n\n        // /// private\n\n        /**\n         * The with of the tiling sprite\n         *\n         * @member {number}\n         * @private\n         */\n        this._width = width;\n\n        /**\n         * The height of the tiling sprite\n         *\n         * @member {number}\n         * @private\n         */\n        this._height = height;\n\n        /**\n         * Canvas pattern\n         *\n         * @type {CanvasPattern}\n         * @private\n         */\n        this._canvasPattern = null;\n\n        /**\n         * matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space\n         *\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         *\n         * @member {string}\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        /**\n         * Whether or not anchor affects uvs\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     *\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin()\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value) // eslint-disable-line require-jsdoc\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /**\n     * The scaling of the image that is being tiled\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get tileScale()\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value) // eslint-disable-line require-jsdoc\n    {\n        this.tileTransform.scale.copyFrom(value);\n    }\n\n    /**\n     * The offset of the image that is being tiled\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get tilePosition()\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value) // eslint-disable-line require-jsdoc\n    {\n        this.tileTransform.position.copyFrom(value);\n    }\n\n    /**\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the tiling sprite.\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     *\n     * @param {PIXI.Point} point - the point to check\n     * @return {boolean} Whether or not the sprite contains the point.\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {number} width - the width of the tiling sprite\n     * @param {number} height - the height of the tiling sprite\n     * @return {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source, width, height)\n    {\n        return new TilingSprite(Texture.from(source), width, height);\n    }\n\n    /**\n     * Helper function that creates a tiling sprite that will use a texture from the TextureCache based on the frameId\n     * The frame ids are created when a Texture packer file has been loaded\n     *\n     * @static\n     * @param {string} frameId - The frame Id of the texture in the cache\n     * @param {number} width - the width of the tiling sprite\n     * @param {number} height - the height of the tiling sprite\n     * @return {PIXI.TilingSprite} A new TilingSprite using a texture from the texture cache matching the frameId\n     */\n    static fromFrame(frameId, width, height)\n    {\n        const texture = TextureCache[frameId];\n\n        if (!texture)\n        {\n            throw new Error(`The frameId \"${frameId}\" does not exist in the texture cache ${this}`);\n        }\n\n        return new TilingSprite(texture, width, height);\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture based on an image url\n     * If the image is not in the texture cache it will be loaded\n     *\n     * @static\n     * @param {string} imageId - The image url of the texture\n     * @param {number} width - the width of the tiling sprite\n     * @param {number} height - the height of the tiling sprite\n     * @param {Object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return {PIXI.TilingSprite} A new TilingSprite using a texture from the texture cache matching the image id\n     */\n    static fromImage(imageId, width, height, options)\n    {\n        // Fallback support for crossorigin, scaleMode parameters\n        if (options && typeof options !== 'object')\n        {\n            options = {\n                scaleMode: arguments[4],\n                resourceOptions: {\n                    crossorigin: arguments[3],\n                },\n            };\n        }\n\n        return new TilingSprite(Texture.from(imageId, options), width, height);\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n    }\n\n    /**\n     * The height of the TilingSprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n    }\n}\n","import { ObjectRenderer, Shader, State, QuadUv } from '@pixi/core';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba, correctBlendMode } from '@pixi/utils';\n\nimport vertex from './tilingSprite.vert';\nimport fragment from './tilingSprite.frag';\nimport fragmentSimple from './tilingSprite_simple.frag';\n\nconst tempMat = new Matrix();\n\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport class TilingSpriteRenderer extends ObjectRenderer\n{\n    /**\n     * constructor for renderer\n     *\n     * @param {PIXI.Renderer} renderer The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        const uniforms = { globals: this.renderer.globalUniforms };\n\n        this.shader = Shader.from(vertex, fragment, uniforms);\n\n        this.simpleShader = Shader.from(vertex, fragmentSimple, uniforms);\n\n        this.quad = new QuadUv();\n\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /**\n     *\n     * @param {PIXI.TilingSprite} ts tilingSprite to be rendered\n     */\n    render(ts)\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        if (ts.uvRespectAnchor)\n        {\n            vertices = quad.uvs;\n\n            vertices[0] = vertices[6] = -ts.anchor.x;\n            vertices[1] = vertices[3] = -ts.anchor.y;\n\n            vertices[2] = vertices[4] = 1.0 - ts.anchor.x;\n            vertices[5] = vertices[7] = 1.0 - ts.anchor.y;\n        }\n\n        quad.invalidate();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvMatrix;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = premultiplyTintToRgba(ts.tint, ts.worldAlpha,\n            shader.uniforms.uColor, baseTex.alphaMode);\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad);// , renderer.shader.getGLShader());\n\n        this.state.blendMode = correctBlendMode(ts.blendMode, baseTex.alphaMode);\n        renderer.state.set(this.state);\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n"],"names":["const","Point","super","Transform","TextureMatrix","Rectangle","Texture","TextureCache","Sprite","Matrix","Shader","QuadUv","State","let","WRAP_MODES","premultiplyTintToRgba","correctBlendMode","ObjectRenderer"],"mappings":"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"}