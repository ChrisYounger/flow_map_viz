{"version":3,"file":"display.min.js","sources":["../src/settings.js","../src/Bounds.js","../src/DisplayObject.js","../src/Container.js"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Sets the default value for the container property 'sortableChildren'.\n * If set to true, the container will sort its children by zIndex value\n * when updateTransform() is called, or manually if sortChildren() is called.\n *\n * This actually changes the order of elements in the array, so should be treated\n * as a basic solution that is not performant compared to other solutions,\n * such as @link https://github.com/pixijs/pixi-display\n *\n * Also be aware of that this may not work nicely with the addChildAt() function,\n * as the zIndex sorting may cause the child to automatically sorted to another position.\n *\n * @static\n * @constant\n * @name SORTABLE_CHILDREN\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.SORTABLE_CHILDREN = false;\n\nexport { settings };\n","import { Rectangle } from '@pixi/math';\n\n/**\n * 'Builder' pattern for bounds rectangles.\n *\n * This could be called an Axis-Aligned Bounding Box.\n * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n *\n * @class\n * @memberof PIXI\n */\nexport class Bounds\n{\n    constructor()\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minX = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minY = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxX = -Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxY = -Infinity;\n\n        this.rect = null;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     *\n     * @return {boolean} True if empty.\n     */\n    isEmpty()\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /**\n     * Clears the bounds and resets.\n     *\n     */\n    clear()\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     *\n     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n     * @returns {PIXI.Rectangle} A rectangle of the bounds\n     */\n    getRectangle(rect)\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     *\n     * @param {PIXI.Point} point - The point to add.\n     */\n    addPoint(point)\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     *\n     * @param {Float32Array} vertices - The verts to add.\n     */\n    addQuad(vertices)\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     *\n     * @param {PIXI.Transform} transform - transform to apply\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     */\n    addFrame(transform, x0, y0, x1, y1)\n    {\n        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    }\n\n    /**\n     * Adds sprite frame, multiplied by matrix\n     *\n     * @param {PIXI.Matrix} matrix - matrix to apply\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     */\n    addFrameMatrix(matrix, x0, y0, x1, y1)\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds screen vertices from array\n     *\n     * @param {Float32Array} vertexData - calculated vertices\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     */\n    addVertexData(vertexData, beginOffset, endOffset)\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const x = vertexData[i];\n            const y = vertexData[i + 1];\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of mesh vertices\n     *\n     * @param {PIXI.Transform} transform - mesh transform\n     * @param {Float32Array} vertices - mesh coordinates in array\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     */\n    addVertices(transform, vertices, beginOffset, endOffset)\n    {\n        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    }\n\n    /**\n     * Add an array of mesh vertices\n     *\n     * @param {PIXI.Matrix} matrix - mesh matrix\n     * @param {Float32Array} vertices - mesh coordinates in array\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     * @param {number} [padX] - x padding\n     * @param {number} [padY] - y padding\n     */\n    addVerticesMatrix(matrix, vertices, beginOffset, endOffset, padX, padY)\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        padX = padX || 0;\n        padY = padY || 0;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = Math.min(minX, x - padX);\n            maxX = Math.max(maxX, x + padX);\n            minY = Math.min(minY, y - padY);\n            maxY = Math.max(maxY, y + padY);\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     */\n    addBounds(bounds)\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Bounds} mask - TODO\n     */\n    addBoundsMask(bounds, mask)\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty\n     *\n     * @param {PIXI.Bounds} bounds other bounds\n     * @param {PIXI.Matrix} matrix multiplicator\n     */\n    addBoundsMatrix(bounds, matrix)\n    {\n        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Rectangle} area - TODO\n     */\n    addBoundsArea(bounds, area)\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param {number} [paddingX=0] - The horizontal padding amount.\n     * @param {number} [paddingY=0] - The vertical padding amount.\n     */\n    pad(paddingX, paddingY)\n    {\n        paddingX = paddingX || 0;\n        paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);\n\n        if (!this.isEmpty())\n        {\n            this.minX -= paddingX;\n            this.maxX += paddingX;\n            this.minY -= paddingY;\n            this.maxY += paddingY;\n        }\n    }\n\n    /**\n     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n     *\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     * @param {number} padX - padding X\n     * @param {number} padY - padding Y\n     */\n    addFramePad(x0, y0, x1, y1, padX, padY)\n    {\n        x0 -= padX;\n        y0 -= padY;\n        x1 += padX;\n        y1 += padY;\n\n        this.minX = this.minX < x0 ? this.minX : x0;\n        this.maxX = this.maxX > x1 ? this.maxX : x1;\n        this.minY = this.minY < y0 ? this.minY : y0;\n        this.maxY = this.maxY > y1 ? this.maxY : y1;\n    }\n}\n","import { EventEmitter } from '@pixi/utils';\nimport { Rectangle, Transform, RAD_TO_DEG, DEG_TO_RAD } from '@pixi/math';\nimport { Bounds } from './Bounds';\n// _tempDisplayObjectParent = new DisplayObject();\n\n/**\n * The base class for all objects that are rendered on the screen.\n *\n * This is an abstract class and should not be used on its own; rather it should be extended.\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport class DisplayObject extends EventEmitter\n{\n    /**\n     * Mixes all enumerable properties and methods from a source object to DisplayObject.\n     *\n     * @param {object} source The source of properties and methods to mix in.\n     */\n    static mixin(source)\n    {\n        // in ES8/ES2017, this would be really easy:\n        // Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n\n        // get all the enumerable property keys\n        const keys = Object.keys(source);\n\n        // loop through properties\n        for (let i = 0; i < keys.length; ++i)\n        {\n            const propertyName = keys[i];\n\n            // Set the property using the property descriptor - this works for accessors and normal value properties\n            Object.defineProperty(\n                DisplayObject.prototype,\n                propertyName,\n                Object.getOwnPropertyDescriptor(source, propertyName)\n            );\n        }\n    }\n\n    constructor()\n    {\n        super();\n\n        this.tempDisplayObjectParent = null;\n\n        // TODO: need to create Transform from factory\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform}\n         */\n        this.transform = new Transform();\n\n        /**\n         * The opacity of the object.\n         *\n         * @member {number}\n         */\n        this.alpha = 1;\n\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean}\n         */\n        this.visible = true;\n\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean}\n         */\n        this.renderable = true;\n\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container}\n         * @readonly\n         */\n        this.parent = null;\n\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.worldAlpha = 1;\n\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number}\n         * @protected\n         */\n        this._lastSortedIndex = 0;\n\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         * @protected\n         */\n        this._zIndex = 0;\n\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle}\n         */\n        this.filterArea = null;\n\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]}\n         */\n        this.filters = null;\n        this._enabledFilters = null;\n\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        this._bounds = new Bounds();\n        this._boundsID = 0;\n        this._lastBoundsID = -1;\n        this._boundsRect = null;\n        this._localBoundsRect = null;\n\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Graphics|PIXI.Sprite|null}\n         * @protected\n         */\n        this._mask = null;\n\n        /**\n         * Fired when this DisplayObject is added to a Container.\n         *\n         * @event PIXI.DisplayObject#added\n         * @param {PIXI.Container} container - The container added to.\n         */\n\n        /**\n         * Fired when this DisplayObject is removed from a Container.\n         *\n         * @event PIXI.DisplayObject#removed\n         * @param {PIXI.Container} container - The container removed from.\n         */\n\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @protected\n         */\n        this._destroyed = false;\n\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = false;\n\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean}\n         */\n        this.isMask = false;\n    }\n\n    /**\n     * @protected\n     * @member {PIXI.DisplayObject}\n     */\n    get _tempDisplayObjectParent()\n    {\n        if (this.tempDisplayObjectParent === null)\n        {\n            this.tempDisplayObjectParent = new DisplayObject();\n        }\n\n        return this.tempDisplayObjectParent;\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     *\n     * TODO - Optimization pass!\n     */\n    updateTransform()\n    {\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n        // multiply the alphas..\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    }\n\n    /**\n     * Recalculates the bounds of the display object.\n     *\n     * Does nothing by default and can be overwritten in a parent class.\n     */\n    calculateBounds()\n    {\n        // OVERWRITE;\n    }\n\n    /**\n     * Recursively updates transform of all objects from the root to this one\n     * internal function for toLocal()\n     */\n    _recursivePostUpdateTransform()\n    {\n        if (this.parent)\n        {\n            this.parent._recursivePostUpdateTransform();\n            this.transform.updateTransform(this.parent.transform);\n        }\n        else\n        {\n            this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n        }\n    }\n\n    /**\n     * Retrieves the bounds of the displayObject as a rectangle object.\n     *\n     * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    getBounds(skipUpdate, rect)\n    {\n        if (!skipUpdate)\n        {\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent;\n                this.updateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this._recursivePostUpdateTransform();\n                this.updateTransform();\n            }\n        }\n\n        if (this._boundsID !== this._lastBoundsID)\n        {\n            this.calculateBounds();\n            this._lastBoundsID = this._boundsID;\n        }\n\n        if (!rect)\n        {\n            if (!this._boundsRect)\n            {\n                this._boundsRect = new Rectangle();\n            }\n\n            rect = this._boundsRect;\n        }\n\n        return this._bounds.getRectangle(rect);\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    getLocalBounds(rect)\n    {\n        const transformRef = this.transform;\n        const parentRef = this.parent;\n\n        this.parent = null;\n        this.transform = this._tempDisplayObjectParent.transform;\n\n        if (!rect)\n        {\n            if (!this._localBoundsRect)\n            {\n                this._localBoundsRect = new Rectangle();\n            }\n\n            rect = this._localBoundsRect;\n        }\n\n        const bounds = this.getBounds(false, rect);\n\n        this.parent = parentRef;\n        this.transform = transformRef;\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the global position of the display object.\n     *\n     * @param {PIXI.IPoint} position - The world origin to calculate from.\n     * @param {PIXI.IPoint} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n     * @return {PIXI.IPoint} A point object representing the position of this object.\n     */\n    toGlobal(position, point, skipUpdate = false)\n    {\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // don't need to update the lot\n        return this.worldTransform.apply(position, point);\n    }\n\n    /**\n     * Calculates the local position of the display object relative to another point.\n     *\n     * @param {PIXI.IPoint} position - The world origin to calculate from.\n     * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n     * @param {PIXI.IPoint} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n     * @return {PIXI.IPoint} A point object representing the position of this object\n     */\n    toLocal(position, from, point, skipUpdate)\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse(position, point);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * @param {PIXI.Renderer} renderer - The renderer.\n     */\n    render(renderer) // eslint-disable-line no-unused-vars\n    {\n        // OVERWRITE;\n    }\n\n    /**\n     * Set the parent Container of this DisplayObject.\n     *\n     * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n     * @return {PIXI.Container} The Container that this DisplayObject was added to.\n     */\n    setParent(container)\n    {\n        if (!container || !container.addChild)\n        {\n            throw new Error('setParent: Argument must be a Container');\n        }\n\n        container.addChild(this);\n\n        return container;\n    }\n\n    /**\n     * Convenience function to set the position, scale, skew and pivot at once.\n     *\n     * @param {number} [x=0] - The X position\n     * @param {number} [y=0] - The Y position\n     * @param {number} [scaleX=1] - The X scale value\n     * @param {number} [scaleY=1] - The Y scale value\n     * @param {number} [rotation=0] - The rotation\n     * @param {number} [skewX=0] - The X skew value\n     * @param {number} [skewY=0] - The Y skew value\n     * @param {number} [pivotX=0] - The X pivot value\n     * @param {number} [pivotY=0] - The Y pivot value\n     * @return {PIXI.DisplayObject} The DisplayObject instance\n     */\n    setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0)\n    {\n        this.position.x = x;\n        this.position.y = y;\n        this.scale.x = !scaleX ? 1 : scaleX;\n        this.scale.y = !scaleY ? 1 : scaleY;\n        this.rotation = rotation;\n        this.skew.x = skewX;\n        this.skew.y = skewY;\n        this.pivot.x = pivotX;\n        this.pivot.y = pivotY;\n\n        return this;\n    }\n\n    /**\n     * Base destroy method for generic display objects. This will automatically\n     * remove the display object from its parent Container as well as remove\n     * all current event listeners and internal references. Do not use a DisplayObject\n     * after calling `destroy()`.\n     *\n     */\n    destroy()\n    {\n        if (this.parent)\n        {\n            this.parent.removeChild(this);\n        }\n        this.removeAllListeners();\n        this.transform = null;\n\n        this.parent = null;\n        this._bounds = null;\n        this._currentBounds = null;\n        this._mask = null;\n\n        this.filters = null;\n        this.filterArea = null;\n        this.hitArea = null;\n\n        this.interactive = false;\n        this.interactiveChildren = false;\n\n        this._destroyed = true;\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     * An alias to position.x\n     *\n     * @member {number}\n     */\n    get x()\n    {\n        return this.position.x;\n    }\n\n    set x(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.position.x = value;\n    }\n\n    /**\n     * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n     * An alias to position.y\n     *\n     * @member {number}\n     */\n    get y()\n    {\n        return this.position.y;\n    }\n\n    set y(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.position.y = value;\n    }\n\n    /**\n     * Current transform of the object based on world (parent) factors.\n     *\n     * @member {PIXI.Matrix}\n     * @readonly\n     */\n    get worldTransform()\n    {\n        return this.transform.worldTransform;\n    }\n\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     *\n     * @member {PIXI.Matrix}\n     * @readonly\n     */\n    get localTransform()\n    {\n        return this.transform.localTransform;\n    }\n\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.IPoint}\n     */\n    get position()\n    {\n        return this.transform.position;\n    }\n\n    set position(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.position.copyFrom(value);\n    }\n\n    /**\n     * The scale factor of the object.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.IPoint}\n     */\n    get scale()\n    {\n        return this.transform.scale;\n    }\n\n    set scale(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.scale.copyFrom(value);\n    }\n\n    /**\n     * The pivot point of the displayObject that it rotates around.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.IPoint}\n     */\n    get pivot()\n    {\n        return this.transform.pivot;\n    }\n\n    set pivot(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.pivot.copyFrom(value);\n    }\n\n    /**\n     * The skew factor for the object in radians.\n     * Assignment by value since pixi-v4.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get skew()\n    {\n        return this.transform.skew;\n    }\n\n    set skew(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.skew.copyFrom(value);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this.transform.rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.rotation = value;\n    }\n\n    /**\n     * The angle of the object in degrees.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     *\n     * @member {number}\n     */\n    get angle()\n    {\n        return this.transform.rotation * RAD_TO_DEG;\n    }\n\n    set angle(value) // eslint-disable-line require-jsdoc\n    {\n        this.transform.rotation = value * DEG_TO_RAD;\n    }\n\n    /**\n     * The zIndex of the displayObject.\n     * If a container has the sortableChildren property set to true, children will be automatically\n     * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n     * and thus rendered on top of other displayObjects within the same container.\n     *\n     * @member {number}\n     */\n    get zIndex()\n    {\n        return this._zIndex;\n    }\n\n    set zIndex(value) // eslint-disable-line require-jsdoc\n    {\n        this._zIndex = value;\n        if (this.parent)\n        {\n            this.parent.sortDirty = true;\n        }\n    }\n\n    /**\n     * Indicates if the object is globally visible.\n     *\n     * @member {boolean}\n     * @readonly\n     */\n    get worldVisible()\n    {\n        let item = this;\n\n        do\n        {\n            if (!item.visible)\n            {\n                return false;\n            }\n\n            item = item.parent;\n        } while (item);\n\n        return true;\n    }\n\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n     * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n     * utilities shape clipping. To remove a mask, set this property to `null`.\n     *\n     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n     * @example\n     * const graphics = new PIXI.Graphics();\n     * graphics.beginFill(0xFF3300);\n     * graphics.drawRect(50, 250, 100, 100);\n     * graphics.endFill();\n     *\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.mask = graphics;\n     * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n     *\n     * @member {PIXI.Container|PIXI.MaskData}\n     */\n    get mask()\n    {\n        return this._mask;\n    }\n\n    set mask(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._mask)\n        {\n            const maskObject = this._mask.maskObject || this._mask;\n\n            maskObject.renderable = true;\n            maskObject.isMask = false;\n        }\n\n        this._mask = value;\n\n        if (this._mask)\n        {\n            const maskObject = this._mask.maskObject || this._mask;\n\n            maskObject.renderable = false;\n            maskObject.isMask = true;\n        }\n    }\n}\n\n/**\n * DisplayObject default updateTransform, does not update children of container.\n * Will crash if there's no parent element.\n *\n * @memberof PIXI.DisplayObject#\n * @function displayObjectUpdateTransform\n */\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\n","import { settings } from '@pixi/settings';\nimport { removeItems } from '@pixi/utils';\nimport { DisplayObject } from './DisplayObject';\n\nfunction sortChildren(a, b)\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\n/**\n * A Container represents a collection of display objects.\n *\n * It is the base class of all display objects that act as a container for other objects (like Sprites).\n *\n *```js\n * let container = new PIXI.Container();\n * container.addChild(sprite);\n * ```\n *\n * @class\n * @extends PIXI.DisplayObject\n * @memberof PIXI\n */\nexport class Container extends DisplayObject\n{\n    constructor()\n    {\n        super();\n\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]}\n         * @readonly\n         */\n        this.children = [];\n\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean}\n         */\n        this.sortableChildren = settings.SORTABLE_CHILDREN;\n\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean}\n         */\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         *\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         *\n         * @event PIXI.DisplayObject#removedFrom\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed removed the child.\n         * @param {number} index - The former children's index of the removed child\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified\n     *\n     * @protected\n     */\n    onChildrenChange()\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     *\n     * @param {...PIXI.DisplayObject} child - The DisplayObject(s) to add to the container\n     * @return {PIXI.DisplayObject} The first child that was added.\n     */\n    addChild(child)\n    {\n        const argumentsLength = arguments.length;\n\n        // if there is only one argument we can bypass looping through the them\n        if (argumentsLength > 1)\n        {\n            // loop through the arguments property and add all children\n            // use it the right way (.length and [i]) so that this function can still be optimized by JS runtimes\n            for (let i = 0; i < argumentsLength; i++)\n            {\n                this.addChild(arguments[i]);\n            }\n        }\n        else\n        {\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return child;\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     *\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @return {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt(child, index)\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     *\n     * @param {PIXI.DisplayObject} child - First display object to swap\n     * @param {PIXI.DisplayObject} child2 - Second display object to swap\n     */\n    swapChildren(child, child2)\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     *\n     * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n     * @return {number} The index position of the child display object to identify\n     */\n    getChildIndex(child)\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     *\n     * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n     * @param {number} index - The resulting index number for the child display object\n     */\n    setChildIndex(child, index)\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     *\n     * @param {number} index - The index to get the child at\n     * @return {PIXI.DisplayObject} The child at the given index, if any.\n     */\n    getChildAt(index)\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     *\n     * @param {...PIXI.DisplayObject} child - The DisplayObject(s) to remove\n     * @return {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild(child)\n    {\n        const argumentsLength = arguments.length;\n\n        // if there is only one argument we can bypass looping through the them\n        if (argumentsLength > 1)\n        {\n            // loop through the arguments property and add all children\n            // use it the right way (.length and [i]) so that this function can still be optimized by JS runtimes\n            for (let i = 0; i < argumentsLength; i++)\n            {\n                this.removeChild(arguments[i]);\n            }\n        }\n        else\n        {\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return child;\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     *\n     * @param {number} index - The index to get the child from\n     * @return {PIXI.DisplayObject} The child that was removed.\n     */\n    removeChildAt(index)\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     *\n     * @param {number} [beginIndex=0] - The beginning position.\n     * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n     * @returns {PIXI.DisplayObject[]} List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex)\n    {\n        const begin = beginIndex;\n        const end = typeof endIndex === 'number' ? endIndex : this.children.length;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /**\n     * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n     */\n    sortChildren()\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /**\n     * Updates the transform on all children of this container for rendering\n     */\n    updateTransform()\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     */\n    calculateBounds()\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = child._mask.maskObject || child._mask;\n\n                maskObject.calculateBounds();\n                this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._lastBoundsID = this._boundsID;\n    }\n\n    /**\n     * Recalculates the bounds of the object. Override this to\n     * calculate the bounds of the specific object (not including children).\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    render(renderer)\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || (this.filters && this.filters.length))\n        {\n            this.renderAdvanced(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            // simple render children!\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    renderAdvanced(renderer)\n    {\n        renderer.batch.flush();\n\n        const filters = this.filters;\n        const mask = this._mask;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n\n            if (this._enabledFilters.length)\n            {\n                renderer.filter.push(this, this._enabledFilters);\n            }\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        // add this object to the batch, only rendered if it has a texture.\n        this._render(renderer);\n\n        // now loop through the children and make sure they get rendered\n        for (let i = 0, j = this.children.length; i < j; i++)\n        {\n            this.children[i].render(renderer);\n        }\n\n        renderer.batch.flush();\n\n        if (mask)\n        {\n            renderer.mask.pop(this, this._mask);\n        }\n\n        if (filters && this._enabledFilters && this._enabledFilters.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer) // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options && options.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /**\n     * The width of the Container, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /**\n     * The height of the Container, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n// performance increase to avoid using call.. (10x faster)\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n"],"names":["SORTABLE_CHILDREN","Bounds","this","minX","Infinity","minY","maxX","maxY","rect","isEmpty","clear","getRectangle","Rectangle","EMPTY","x","y","width","height","addPoint","point","Math","min","max","addQuad","vertices","let","addFrame","transform","x0","y0","x1","y1","addFrameMatrix","worldTransform","matrix","const","a","b","c","d","tx","ty","addVertexData","vertexData","beginOffset","endOffset","i","addVertices","addVerticesMatrix","padX","padY","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsMatrix","addBoundsArea","area","pad","paddingX","paddingY","addFramePad","DisplayObject","super","tempDisplayObjectParent","Transform","alpha","visible","renderable","parent","worldAlpha","_lastSortedIndex","_zIndex","filterArea","filters","_enabledFilters","_bounds","_boundsID","_lastBoundsID","_boundsRect","_localBoundsRect","_mask","_destroyed","isSprite","isMask","mixin","source","keys","Object","length","propertyName","defineProperty","prototype","getOwnPropertyDescriptor","_tempDisplayObjectParent","updateTransform","calculateBounds","_recursivePostUpdateTransform","getBounds","skipUpdate","getLocalBounds","transformRef","parentRef","toGlobal","position","displayObjectUpdateTransform","apply","toLocal","from","applyInverse","render","renderer","setParent","container","addChild","Error","setTransform","scaleX","scaleY","rotation","skewX","skewY","pivotX","pivotY","scale","skew","pivot","destroy","removeChild","removeAllListeners","_currentBounds","hitArea","interactive","interactiveChildren","prototypeAccessors","value","localTransform","copyFrom","angle","RAD_TO_DEG","DEG_TO_RAD","zIndex","sortDirty","worldVisible","item","maskObject","EventEmitter","sortChildren","Container","children","sortableChildren","settings","onChildrenChange","child","argumentsLength","arguments","_parentID","push","emit","addChildAt","index","splice","swapChildren","child2","index1","getChildIndex","index2","indexOf","setChildIndex","currentIndex","removeItems","getChildAt","removeChildAt","removeChildren","beginIndex","endIndex","removed","begin","end","range","RangeError","sortRequired","j","sort","_calculateBounds","renderAdvanced","_render","batch","flush","enabled","filter","pop","options","destroyChildren","oldChildren","_width","_height","containerUpdateTransform"],"mappings":";;;;;;;oFAqBSA,mBAAoB,MCVhBC,EAET,WAMIC,KAAKC,KAAOC,EAAAA,EAMZF,KAAKG,KAAOD,EAAAA,EAMZF,KAAKI,MAAQF,EAAAA,EAMbF,KAAKK,MAAQH,EAAAA,EAEbF,KAAKM,KAAO,MAQpBP,YAAIQ,mBAEI,OAAOP,KAAKC,KAAOD,KAAKI,MAAQJ,KAAKG,KAAOH,KAAKK,MAOzDN,YAAIS,iBAEIR,KAAKC,KAAOC,EAAAA,EACZF,KAAKG,KAAOD,EAAAA,EACZF,KAAKI,MAAQF,EAAAA,EACbF,KAAKK,MAAQH,EAAAA,GAUrBH,YAAIU,sBAAaH,GAET,OAAIN,KAAKC,KAAOD,KAAKI,MAAQJ,KAAKG,KAAOH,KAAKK,KAEnCK,YAAUC,QAGrBL,EAAOA,GAAQ,IAAII,YAAU,EAAG,EAAG,EAAG,IAEjCE,EAAIZ,KAAKC,KACdK,EAAKO,EAAIb,KAAKG,KAClBG,EAASQ,MAAQd,KAAKI,KAAOJ,KAAKC,KAClCK,EAASS,OAASf,KAAKK,KAAOL,KAAKG,KAExBG,IAQfP,YAAIiB,kBAASC,GAELjB,KAAKC,KAAOiB,KAAKC,IAAInB,KAAKC,KAAMgB,EAAML,GACtCZ,KAAKI,KAAOc,KAAKE,IAAIpB,KAAKI,KAAMa,EAAML,GACtCZ,KAAKG,KAAOe,KAAKC,IAAInB,KAAKG,KAAMc,EAAMJ,GACtCb,KAAKK,KAAOa,KAAKE,IAAIpB,KAAKK,KAAMY,EAAMJ,IAQ9Cd,YAAIsB,iBAAQC,GAEJC,IAAItB,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAEZO,EAAIU,EAAS,GACbT,EAAIS,EAAS,GAErBrB,EAAWW,EAAIX,EAAOW,EAAIX,EAC1BE,EAAWU,EAAIV,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAI1BJ,GAFIW,EAAIU,EAAS,IAEFrB,EAAOW,EAAIX,EAC1BE,GAFIU,EAAIS,EAAS,IAEFnB,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAI1BJ,GAFIW,EAAIU,EAAS,IAEFrB,EAAOW,EAAIX,EAC1BE,GAFIU,EAAIS,EAAS,IAEFnB,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAI1BJ,GAFIW,EAAIU,EAAS,IAEFrB,EAAOW,EAAIX,EAC1BE,GAFIU,EAAIS,EAAS,IAEFnB,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAEtBL,KAAKC,KAAOA,EACZD,KAAKG,KAAOA,EACZH,KAAKI,KAAOA,EACZJ,KAAKK,KAAOA,GAYpBN,YAAIyB,kBAASC,EAAWC,EAAIC,EAAIC,EAAIC,GAE5B7B,KAAK8B,eAAeL,EAAUM,eAAgBL,EAAIC,EAAIC,EAAIC,IAYlE9B,YAAI+B,wBAAeE,EAAQN,EAAIC,EAAIC,EAAIC,GAE/BI,IAAMC,EAAIF,EAAOE,EACXC,EAAIH,EAAOG,EACXC,EAAIJ,EAAOI,EACXC,EAAIL,EAAOK,EACXC,EAAKN,EAAOM,GACZC,EAAKP,EAAOO,GAEdtC,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAEZO,EAAKsB,EAAIR,EAAOU,EAAIT,EAAMW,EAC1BzB,EAAKsB,EAAIT,EAAOW,EAAIV,EAAMY,EAElCtC,EAAWW,EAAIX,EAAOW,EAAIX,EAC1BE,EAAWU,EAAIV,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAI1BJ,GAFIW,EAAKsB,EAAIN,EAAOQ,EAAIT,EAAMW,GAEfrC,EAAOW,EAAIX,EAC1BE,GAFIU,EAAKsB,EAAIP,EAAOS,EAAIV,EAAMY,GAEfpC,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAI1BJ,GAFIW,EAAKsB,EAAIR,EAAOU,EAAIP,EAAMS,GAEfrC,EAAOW,EAAIX,EAC1BE,GAFIU,EAAKsB,EAAIT,EAAOW,EAAIR,EAAMU,GAEfpC,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAI1BJ,GAFIW,EAAKsB,EAAIN,EAAOQ,EAAIP,EAAMS,GAEfrC,EAAOW,EAAIX,EAC1BE,GAFIU,EAAKsB,EAAIP,EAAOS,EAAIR,EAAMU,GAEfpC,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAEtBL,KAAKC,KAAOA,EACZD,KAAKG,KAAOA,EACZH,KAAKI,KAAOA,EACZJ,KAAKK,KAAOA,GAUpBN,YAAIyC,uBAAcC,EAAYC,EAAaC,GAOnC,IALApB,IAAItB,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAEPuC,EAAIF,EAAaE,EAAID,EAAWC,GAAK,EAClD,CACI,IAAUhC,EAAI6B,EAAWG,GACf/B,EAAI4B,EAAWG,EAAI,GAE7B3C,EAAWW,EAAIX,EAAOW,EAAIX,EAC1BE,EAAWU,EAAIV,EAAOU,EAAIV,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAC1BC,EAAWQ,EAAIR,EAAOQ,EAAIR,EAG1BL,KAAKC,KAAOA,EACZD,KAAKG,KAAOA,EACZH,KAAKI,KAAOA,EACZJ,KAAKK,KAAOA,GAWpBN,YAAI8C,qBAAYpB,EAAWH,EAAUoB,EAAaC,GAE1C3C,KAAK8C,kBAAkBrB,EAAUM,eAAgBT,EAAUoB,EAAaC,IAahF5C,YAAI+C,2BAAkBd,EAAQV,EAAUoB,EAAaC,EAAWI,EAAMC,GAE9Df,IAAMC,EAAIF,EAAOE,EACXC,EAAIH,EAAOG,EACXC,EAAIJ,EAAOI,EACXC,EAAIL,EAAOK,EACXC,EAAKN,EAAOM,GACZC,EAAKP,EAAOO,GAElBQ,EAAOA,GAAQ,EACfC,EAAOA,GAAQ,EAOf,IALAzB,IAAItB,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAEPuC,EAAIF,EAAaE,EAAID,EAAWC,GAAK,EAClD,CACI,IAAUK,EAAO3B,EAASsB,GAChBM,EAAO5B,EAASsB,EAAI,GACpBhC,EAAKsB,EAAIe,EAASb,EAAIc,EAAQZ,EAC9BzB,EAAKwB,EAAIa,EAASf,EAAIc,EAAQV,EAEpCtC,EAAOiB,KAAKC,IAAIlB,EAAMW,EAAImC,GAC1B3C,EAAOc,KAAKE,IAAIhB,EAAMQ,EAAImC,GAC1B5C,EAAOe,KAAKC,IAAIhB,EAAMU,EAAImC,GAC1B3C,EAAOa,KAAKE,IAAIf,EAAMQ,EAAImC,GAG9BhD,KAAKC,KAAOA,EACZD,KAAKG,KAAOA,EACZH,KAAKI,KAAOA,EACZJ,KAAKK,KAAOA,GAQpBN,YAAIoD,mBAAUC,GAENnB,IAAMhC,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAElBL,KAAKC,KAAOmD,EAAOnD,KAAOA,EAAOmD,EAAOnD,KAAOA,EAC/CD,KAAKG,KAAOiD,EAAOjD,KAAOA,EAAOiD,EAAOjD,KAAOA,EAC/CH,KAAKI,KAAOgD,EAAOhD,KAAOA,EAAOgD,EAAOhD,KAAOA,EAC/CJ,KAAKK,KAAO+C,EAAO/C,KAAOA,EAAO+C,EAAO/C,KAAOA,GASvDN,YAAIsD,uBAAcD,EAAQE,GAElBrB,IAAMsB,EAAQH,EAAOnD,KAAOqD,EAAKrD,KAAOmD,EAAOnD,KAAOqD,EAAKrD,KACrDuD,EAAQJ,EAAOjD,KAAOmD,EAAKnD,KAAOiD,EAAOjD,KAAOmD,EAAKnD,KACrDsD,EAAQL,EAAOhD,KAAOkD,EAAKlD,KAAOgD,EAAOhD,KAAOkD,EAAKlD,KACrDsD,EAAQN,EAAO/C,KAAOiD,EAAKjD,KAAO+C,EAAO/C,KAAOiD,EAAKjD,KAE3D,GAAIkD,GAASE,GAASD,GAASE,EACnC,CACQzB,IAAMhC,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAEtBL,KAASC,KAAOsD,EAAQtD,EAAOsD,EAAQtD,EACvCD,KAASG,KAAOqD,EAAQrD,EAAOqD,EAAQrD,EACvCH,KAASI,KAAOqD,EAAQrD,EAAOqD,EAAQrD,EACvCJ,KAASK,KAAOqD,EAAQrD,EAAOqD,EAAQrD,IAU/CN,YAAI4D,yBAAgBP,EAAQpB,GAExBhC,KAAS8B,eAAeE,EAAQoB,EAAOnD,KAAMmD,EAAOjD,KAAMiD,EAAOhD,KAAMgD,EAAO/C,OASlFN,YAAI6D,uBAAcR,EAAQS,GAElB5B,IAAMsB,EAAQH,EAAOnD,KAAO4D,EAAKjD,EAAIwC,EAAOnD,KAAO4D,EAAKjD,EAClD4C,EAAQJ,EAAOjD,KAAO0D,EAAKhD,EAAIuC,EAAOjD,KAAO0D,EAAKhD,EAClD4C,EAAQL,EAAOhD,KAAOyD,EAAKjD,EAAIiD,EAAK/C,MAAQsC,EAAOhD,KAAQyD,EAAKjD,EAAIiD,EAAK/C,MACzE4C,EAAQN,EAAO/C,KAAOwD,EAAKhD,EAAIgD,EAAK9C,OAASqC,EAAO/C,KAAQwD,EAAKhD,EAAIgD,EAAK9C,OAEhF,GAAIwC,GAASE,GAASD,GAASE,EACnC,CACQzB,IAAMhC,EAAOD,KAAKC,KACZE,EAAOH,KAAKG,KACZC,EAAOJ,KAAKI,KACZC,EAAOL,KAAKK,KAEtBL,KAASC,KAAOsD,EAAQtD,EAAOsD,EAAQtD,EACvCD,KAASG,KAAOqD,EAAQrD,EAAOqD,EAAQrD,EACvCH,KAASI,KAAOqD,EAAQrD,EAAOqD,EAAQrD,EACvCJ,KAASK,KAAOqD,EAAQrD,EAAOqD,EAAQrD,IAW/CN,YAAI+D,aAAIC,EAAUC,GAEVD,EAAWA,GAAY,EACvBC,EAAWA,IAA2B,IAAbA,EAAkBD,EAAW,GAEjD/D,KAAKO,YAENP,KAAKC,MAAQ8D,EACb/D,KAAKI,MAAQ2D,EACb/D,KAAKG,MAAQ6D,EACbhE,KAAKK,MAAQ2D,IAczBjE,YAAIkE,qBAAYvC,EAAIC,EAAIC,EAAIC,EAAIkB,EAAMC,GAElCtB,GAAUqB,EACVpB,GAAUqB,EACVpB,GAAUmB,EACVlB,GAAUmB,EAENhD,KAAKC,KAAOD,KAAKC,KAAOyB,EAAK1B,KAAKC,KAAOyB,EACzC1B,KAAKI,KAAOJ,KAAKI,KAAOwB,EAAK5B,KAAKI,KAAOwB,EACzC5B,KAAKG,KAAOH,KAAKG,KAAOwB,EAAK3B,KAAKG,KAAOwB,EACzC3B,KAAKK,KAAOL,KAAKK,KAAOwB,EAAK7B,KAAKK,KAAOwB,OCpapCqC,cA6BT,aAEIC,aAEAnE,KAAKoE,wBAA0B,KAS/BpE,KAAKyB,UAAY,IAAI4C,YAOrBrE,KAAKsE,MAAQ,EAUbtE,KAAKuE,SAAU,EAUfvE,KAAKwE,YAAa,EAQlBxE,KAAKyE,OAAS,KAQdzE,KAAK0E,WAAa,EASlB1E,KAAK2E,iBAAmB,EASxB3E,KAAK4E,QAAU,EAUf5E,KAAK6E,WAAa,KASlB7E,KAAK8E,QAAU,KACf9E,KAAK+E,gBAAkB,KAQvB/E,KAAKgF,QAAU,IAAIjF,EACnBC,KAAKiF,UAAY,EACjBjF,KAAKkF,eAAiB,EACtBlF,KAAKmF,YAAc,KACnBnF,KAAKoF,iBAAmB,KAQxBpF,KAAKqF,MAAQ,KAsBbrF,KAAKsF,YAAa,EAMlBtF,KAAKuF,UAAW,EAMhBvF,KAAKwF,QAAS,ieAOlBtB,EAjLOuB,eAAMC,GAST,IAHAzD,IAAM0D,EAAOC,OAAOD,KAAKD,GAGhB9C,EAAI,EAAGA,EAAI+C,EAAKE,SAAUjD,EACnC,CACIX,IAAM6D,EAAeH,EAAK/C,GAG1BgD,OAAOG,eACH7B,EAAc8B,UACdF,EACAF,OAAOK,yBAAyBP,EAAQI,QAgKhDI,wCAOA,OALqC,OAAjClG,KAAKoE,0BAELpE,KAAKoE,wBAA0B,IAAIF,GAGhClE,KAAKoE,qCAQhB+B,2BAEInG,KAAKiF,YAELjF,KAAKyB,UAAU0E,gBAAgBnG,KAAKyE,OAAOhD,WAE3CzB,KAAK0E,WAAa1E,KAAKsE,MAAQtE,KAAKyE,OAAOC,wBAQ/C0B,yCASAC,yCAEQrG,KAAKyE,QAELzE,KAAKyE,OAAO4B,gCACZrG,KAAKyB,UAAU0E,gBAAgBnG,KAAKyE,OAAOhD,YAI3CzB,KAAKyB,UAAU0E,gBAAgBnG,KAAKkG,yBAAyBzE,wBAarE6E,mBAAUC,EAAYjG,GAiClB,OA/BKiG,IAEIvG,KAAKyE,QAQNzE,KAAKqG,gCACLrG,KAAKmG,oBAPLnG,KAAKyE,OAASzE,KAAKkG,yBACnBlG,KAAKmG,kBACLnG,KAAKyE,OAAS,OASlBzE,KAAKiF,YAAcjF,KAAKkF,gBAExBlF,KAAKoG,kBACLpG,KAAKkF,cAAgBlF,KAAKiF,WAGzB3E,IAEIN,KAAKmF,cAENnF,KAAKmF,YAAc,IAAIzE,aAG3BJ,EAAON,KAAKmF,aAGTnF,KAAKgF,QAAQvE,aAAaH,gBASrCkG,wBAAelG,GAEX2B,IAAMwE,EAAezG,KAAKyB,UACpBiF,EAAY1G,KAAKyE,OAEvBzE,KAAKyE,OAAS,KACdzE,KAAKyB,UAAYzB,KAAKkG,yBAAyBzE,UAE1CnB,IAEIN,KAAKoF,mBAENpF,KAAKoF,iBAAmB,IAAI1E,aAGhCJ,EAAON,KAAKoF,kBAGhBnD,IAAMmB,EAASpD,KAAKsG,WAAU,EAAOhG,GAKrC,OAHAN,KAAKyE,OAASiC,EACd1G,KAAKyB,UAAYgF,EAEVrD,eAYXuD,kBAASC,EAAU3F,EAAOsF,GAsBtB,uBAtBmC,GAE9BA,IAEDvG,KAAKqG,gCAKArG,KAAKyE,OAQNzE,KAAK6G,gCANL7G,KAAKyE,OAASzE,KAAKkG,yBACnBlG,KAAK6G,+BACL7G,KAAKyE,OAAS,OASfzE,KAAK+B,eAAe+E,MAAMF,EAAU3F,gBAa/C8F,iBAAQH,EAAUI,EAAM/F,EAAOsF,GA2B3B,OAzBIS,IAEAJ,EAAWI,EAAKL,SAASC,EAAU3F,EAAOsF,IAGzCA,IAEDvG,KAAKqG,gCAKArG,KAAKyE,OAQNzE,KAAK6G,gCANL7G,KAAKyE,OAASzE,KAAKkG,yBACnBlG,KAAK6G,+BACL7G,KAAKyE,OAAS,OASfzE,KAAK+B,eAAekF,aAAaL,EAAU3F,gBAQtDiG,gBAAOC,iBAWPC,mBAAUC,GAEN,IAAKA,IAAcA,EAAUC,SAEzB,MAAM,IAAIC,MAAM,2CAKpB,OAFAF,EAAUC,SAAStH,MAEZqH,eAiBXG,sBAAa5G,EAAOC,EAAO4G,EAAYC,EAAYC,EAAcC,EAAWC,EAAWC,EAAYC,GAY/F,sBAZa,kBAAO,kBAAY,kBAAY,kBAAc,kBAAW,kBAAW,kBAAY,kBAAY,GAExG/H,KAAK4G,SAAShG,EAAIA,EAClBZ,KAAK4G,SAAS/F,EAAIA,EAClBb,KAAKgI,MAAMpH,EAAK6G,GAAS,EACzBzH,KAAKgI,MAAMnH,EAAK6G,GAAS,EACzB1H,KAAK2H,SAAWA,EAChB3H,KAAKiI,KAAKrH,EAAIgH,EACd5H,KAAKiI,KAAKpH,EAAIgH,EACd7H,KAAKkI,MAAMtH,EAAIkH,EACf9H,KAAKkI,MAAMrH,EAAIkH,EAER/H,kBAUXmI,mBAEQnI,KAAKyE,QAELzE,KAAKyE,OAAO2D,YAAYpI,MAE5BA,KAAKqI,qBACLrI,KAAKyB,UAAY,KAEjBzB,KAAKyE,OAAS,KACdzE,KAAKgF,QAAU,KACfhF,KAAKsI,eAAiB,KACtBtI,KAAKqF,MAAQ,KAEbrF,KAAK8E,QAAU,KACf9E,KAAK6E,WAAa,KAClB7E,KAAKuI,QAAU,KAEfvI,KAAKwI,aAAc,EACnBxI,KAAKyI,qBAAsB,EAE3BzI,KAAKsF,YAAa,GAStBoD,EAAI9H,iBAEA,OAAOZ,KAAK4G,SAAShG,GAGzB8H,EAAI9H,eAAE+H,GAEF3I,KAAKyB,UAAUmF,SAAShG,EAAI+H,GAShCD,EAAI7H,iBAEA,OAAOb,KAAK4G,SAAS/F,GAGzB6H,EAAI7H,eAAE8H,GAEF3I,KAAKyB,UAAUmF,SAAS/F,EAAI8H,GAShCD,EAAI3G,8BAEA,OAAO/B,KAAKyB,UAAUM,gBAS1B2G,EAAIE,8BAEA,OAAO5I,KAAKyB,UAAUmH,gBAS1BF,EAAI9B,wBAEA,OAAO5G,KAAKyB,UAAUmF,UAG1B8B,EAAI9B,sBAAS+B,GAET3I,KAAKyB,UAAUmF,SAASiC,SAASF,IASrCD,EAAIV,qBAEA,OAAOhI,KAAKyB,UAAUuG,OAG1BU,EAAIV,mBAAMW,GAEN3I,KAAKyB,UAAUuG,MAAMa,SAASF,IASlCD,EAAIR,qBAEA,OAAOlI,KAAKyB,UAAUyG,OAG1BQ,EAAIR,mBAAMS,GAEN3I,KAAKyB,UAAUyG,MAAMW,SAASF,IASlCD,EAAIT,oBAEA,OAAOjI,KAAKyB,UAAUwG,MAG1BS,EAAIT,kBAAKU,GAEL3I,KAAKyB,UAAUwG,KAAKY,SAASF,IASjCD,EAAIf,wBAEA,OAAO3H,KAAKyB,UAAUkG,UAG1Be,EAAIf,sBAASgB,GAET3I,KAAKyB,UAAUkG,SAAWgB,GAS9BD,EAAII,qBAEA,OAAO9I,KAAKyB,UAAUkG,SAAWoB,cAGrCL,EAAII,mBAAMH,GAEN3I,KAAKyB,UAAUkG,SAAWgB,EAAQK,cAWtCN,EAAIO,sBAEA,OAAOjJ,KAAK4E,SAGhB8D,EAAIO,oBAAON,GAEP3I,KAAK4E,QAAU+D,EACX3I,KAAKyE,SAELzE,KAAKyE,OAAOyE,WAAY,IAUhCR,EAAIS,4BAEA5H,IAAI6H,EAAOpJ,KAEX,EACA,CACI,IAAKoJ,EAAK7E,QAEN,OAAO,EAGX6E,EAAOA,EAAK3E,aACP2E,GAET,OAAO,GAsBXV,EAAIpF,oBAEA,OAAOtD,KAAKqF,OAGhBqD,EAAIpF,kBAAKqF,GAEL,GAAI3I,KAAKqF,MACT,CACIpD,IAAMoH,EAAarJ,KAAKqF,MAAMgE,YAAcrJ,KAAKqF,MAEjDgE,EAAW7E,YAAa,EACxB6E,EAAW7D,QAAS,EAKxB,GAFAxF,KAAKqF,MAAQsD,EAET3I,KAAKqF,MACT,CACIpD,IAAMoH,EAAarJ,KAAKqF,MAAMgE,YAAcrJ,KAAKqF,MAEjDgE,EAAW7E,YAAa,EACxB6E,EAAW7D,QAAS,8CAtsBG8D,gBCVnC,SAASC,EAAarH,EAAGC,GAErB,OAAID,EAAE+G,SAAW9G,EAAE8G,OAER/G,EAAEyC,iBAAmBxC,EAAEwC,iBAG3BzC,EAAE+G,OAAS9G,EAAE8G,ODqtBxB/E,EAAc8B,UAAUa,6BAA+B3C,EAAc8B,UAAUG,oBCpsBlEqD,cAET,aAEIrF,aAQAnE,KAAKyJ,SAAW,GAiBhBzJ,KAAK0J,iBAAmBC,WAAS7J,kBAQjCE,KAAKkJ,WAAY,qKA0BrBU,0CAaAtC,kBAASuC,mBAECC,EAAkBC,UAAUlE,OAGlC,GAAIiE,EAAkB,EAIlB,IAAKvI,IAAIqB,EAAI,EAAGA,EAAIkH,EAAiBlH,IAEjC5C,KAAKsH,SAASyC,EAAUnH,SAMxBiH,EAAMpF,QAENoF,EAAMpF,OAAO2D,YAAYyB,GAG7BA,EAAMpF,OAASzE,KACfA,KAAKkJ,WAAY,EAGjBW,EAAMpI,UAAUuI,WAAa,EAE7BhK,KAAKyJ,SAASQ,KAAKJ,GAGnB7J,KAAKiF,YAGLjF,KAAK4J,iBAAiB5J,KAAKyJ,SAAS5D,OAAS,GAC7C7F,KAAKkK,KAAK,aAAcL,EAAO7J,KAAMA,KAAKyJ,SAAS5D,OAAS,GAC5DgE,EAAMK,KAAK,QAASlK,MAGxB,OAAO6J,eAUXM,oBAAWN,EAAOO,GAEd,GAAIA,EAAQ,GAAKA,EAAQpK,KAAKyJ,SAAS5D,OAEnC,MAAM,IAAI0B,MAASsC,2BAA8BO,gCAAmCpK,KAAKyJ,SAAe,QAwB5G,OArBII,EAAMpF,QAENoF,EAAMpF,OAAO2D,YAAYyB,GAG7BA,EAAMpF,OAASzE,KACfA,KAAKkJ,WAAY,EAGjBW,EAAMpI,UAAUuI,WAAa,EAE7BhK,KAAKyJ,SAASY,OAAOD,EAAO,EAAGP,GAG/B7J,KAAKiF,YAGLjF,KAAK4J,iBAAiBQ,GACtBP,EAAMK,KAAK,QAASlK,MACpBA,KAAKkK,KAAK,aAAcL,EAAO7J,KAAMoK,GAE9BP,eASXS,sBAAaT,EAAOU,GAEhB,GAAIV,IAAUU,EAAd,CAKAtI,IAAMuI,EAASxK,KAAKyK,cAAcZ,GAC5Ba,EAAS1K,KAAKyK,cAAcF,GAElCvK,KAAKyJ,SAASe,GAAUD,EACxBvK,KAAKyJ,SAASiB,GAAUb,EACxB7J,KAAK4J,iBAAiBY,EAASE,EAASF,EAASE,iBASrDD,uBAAcZ,GAEV5H,IAAMmI,EAAQpK,KAAKyJ,SAASkB,QAAQd,GAEpC,IAAe,IAAXO,EAEA,MAAM,IAAI7C,MAAM,4DAGpB,OAAO6C,eASXQ,uBAAcf,EAAOO,GAEjB,GAAIA,EAAQ,GAAKA,GAASpK,KAAKyJ,SAAS5D,OAEpC,MAAM,IAAI0B,mBAAmB6C,gCAAmCpK,KAAKyJ,SAAe,QAGxFxH,IAAM4I,EAAe7K,KAAKyK,cAAcZ,GAExCiB,cAAY9K,KAAKyJ,SAAUoB,EAAc,GACzC7K,KAAKyJ,SAASY,OAAOD,EAAO,EAAGP,GAE/B7J,KAAK4J,iBAAiBQ,gBAS1BW,oBAAWX,GAEP,GAAIA,EAAQ,GAAKA,GAASpK,KAAKyJ,SAAS5D,OAEpC,MAAM,IAAI0B,4BAA4B6C,uBAG1C,OAAOpK,KAAKyJ,SAASW,gBASzBhC,qBAAYyB,mBAEFC,EAAkBC,UAAUlE,OAGlC,GAAIiE,EAAkB,EAIlB,IAAKvI,IAAIqB,EAAI,EAAGA,EAAIkH,EAAiBlH,IAEjC5C,KAAKoI,YAAY2B,EAAUnH,QAInC,CACIX,IAAMmI,EAAQpK,KAAKyJ,SAASkB,QAAQd,GAEpC,IAAe,IAAXO,EAAc,OAAO,KAEzBP,EAAMpF,OAAS,KAEfoF,EAAMpI,UAAUuI,WAAa,EAC7Bc,cAAY9K,KAAKyJ,SAAUW,EAAO,GAGlCpK,KAAKiF,YAGLjF,KAAK4J,iBAAiBQ,GACtBP,EAAMK,KAAK,UAAWlK,MACtBA,KAAKkK,KAAK,eAAgBL,EAAO7J,KAAMoK,GAG3C,OAAOP,eASXmB,uBAAcZ,GAEVnI,IAAM4H,EAAQ7J,KAAK+K,WAAWX,GAe9B,OAZAP,EAAMpF,OAAS,KACfoF,EAAMpI,UAAUuI,WAAa,EAC7Bc,cAAY9K,KAAKyJ,SAAUW,EAAO,GAGlCpK,KAAKiF,YAGLjF,KAAK4J,iBAAiBQ,GACtBP,EAAMK,KAAK,UAAWlK,MACtBA,KAAKkK,KAAK,eAAgBL,EAAO7J,KAAMoK,GAEhCP,eAUXoB,wBAAeC,EAAgBC,kBAAH,GAExBlJ,IAGImJ,EAHEC,EAAQH,EACRI,EAA0B,iBAAbH,EAAwBA,EAAWnL,KAAKyJ,SAAS5D,OAC9D0F,EAAQD,EAAMD,EAGpB,GAAIE,EAAQ,GAAKA,GAASD,EAC1B,CACIF,EAAUpL,KAAKyJ,SAASY,OAAOgB,EAAOE,GAEtC,IAAKhK,IAAIqB,EAAI,EAAGA,EAAIwI,EAAQvF,SAAUjD,EAElCwI,EAAQxI,GAAG6B,OAAS,KAChB2G,EAAQxI,GAAGnB,YAEX2J,EAAQxI,GAAGnB,UAAUuI,WAAa,GAI1ChK,KAAKiF,YAELjF,KAAK4J,iBAAiBsB,GAEtB,IAAK3J,IAAIqB,EAAI,EAAGA,EAAIwI,EAAQvF,SAAUjD,EAElCwI,EAAQxI,GAAGsH,KAAK,UAAWlK,MAC3BA,KAAKkK,KAAK,eAAgBkB,EAAQxI,GAAI5C,KAAM4C,GAGhD,OAAOwI,EAEN,GAAc,IAAVG,GAAwC,IAAzBvL,KAAKyJ,SAAS5D,OAElC,MAAO,GAGX,MAAM,IAAI2F,WAAW,iFAMzBjC,wBAII,IAFAhI,IAAIkK,GAAe,EAEV7I,EAAI,EAAG8I,EAAI1L,KAAKyJ,SAAS5D,OAAQjD,EAAI8I,IAAK9I,EACnD,CACIX,IAAM4H,EAAQ7J,KAAKyJ,SAAS7G,GAE5BiH,EAAMlF,iBAAmB/B,EAEpB6I,GAAiC,IAAjB5B,EAAMZ,SAEvBwC,GAAe,GAInBA,GAAgBzL,KAAKyJ,SAAS5D,OAAS,GAEvC7F,KAAKyJ,SAASkC,KAAKpC,GAGvBvJ,KAAKkJ,WAAY,eAMrB/C,2BAEQnG,KAAK0J,kBAAoB1J,KAAKkJ,WAE9BlJ,KAAKuJ,eAGTvJ,KAAKiF,YAELjF,KAAKyB,UAAU0E,gBAAgBnG,KAAKyE,OAAOhD,WAG3CzB,KAAK0E,WAAa1E,KAAKsE,MAAQtE,KAAKyE,OAAOC,WAE3C,IAAKnD,IAAIqB,EAAI,EAAG8I,EAAI1L,KAAKyJ,SAAS5D,OAAQjD,EAAI8I,IAAK9I,EACnD,CACIX,IAAM4H,EAAQ7J,KAAKyJ,SAAS7G,GAExBiH,EAAMtF,SAENsF,EAAM1D,gCASlBC,2BAEIpG,KAAKgF,QAAQxE,QAEbR,KAAK4L,mBAEL,IAAKrK,IAAIqB,EAAI,EAAGA,EAAI5C,KAAKyJ,SAAS5D,OAAQjD,IAC1C,CACIX,IAAM4H,EAAQ7J,KAAKyJ,SAAS7G,GAE5B,GAAKiH,EAAMtF,SAAYsF,EAAMrF,WAQ7B,GAHAqF,EAAMzD,kBAGFyD,EAAMxE,MACV,CACIpD,IAAMoH,EAAaQ,EAAMxE,MAAMgE,YAAcQ,EAAMxE,MAEnDgE,EAAWjD,kBACXpG,KAAKgF,QAAQ3B,cAAcwG,EAAM7E,QAASqE,EAAWrE,cAEhD6E,EAAMhF,WAEX7E,KAAKgF,QAAQpB,cAAciG,EAAM7E,QAAS6E,EAAMhF,YAIhD7E,KAAKgF,QAAQ7B,UAAU0G,EAAM7E,SAIrChF,KAAKkF,cAAgBlF,KAAKiF,uBAS9B2G,0CAUA1E,gBAAOC,GAGH,GAAKnH,KAAKuE,WAAWvE,KAAK0E,YAAc,IAAM1E,KAAKwE,WAMnD,GAAIxE,KAAKqF,OAAUrF,KAAK8E,SAAW9E,KAAK8E,QAAQe,OAE5C7F,KAAK6L,eAAe1E,OAGxB,CACInH,KAAK8L,QAAQ3E,GAGb,IAAK5F,IAAIqB,EAAI,EAAG8I,EAAI1L,KAAKyJ,SAAS5D,OAAQjD,EAAI8I,IAAK9I,EAE/C5C,KAAKyJ,SAAS7G,GAAGsE,OAAOC,iBAWpC0E,wBAAe1E,GAEXA,EAAS4E,MAAMC,QAEf/J,IAAM6C,EAAU9E,KAAK8E,QACfxB,EAAOtD,KAAKqF,MAGlB,GAAIP,EACJ,CACS9E,KAAK+E,kBAEN/E,KAAK+E,gBAAkB,IAG3B/E,KAAK+E,gBAAgBc,OAAS,EAE9B,IAAKtE,IAAIqB,EAAI,EAAGA,EAAIkC,EAAQe,OAAQjD,IAE5BkC,EAAQlC,GAAGqJ,SAEXjM,KAAK+E,gBAAgBkF,KAAKnF,EAAQlC,IAItC5C,KAAK+E,gBAAgBc,QAErBsB,EAAS+E,OAAOjC,KAAKjK,KAAMA,KAAK+E,iBAIpCzB,GAEA6D,EAAS7D,KAAK2G,KAAKjK,KAAMA,KAAKqF,OAIlCrF,KAAK8L,QAAQ3E,GAGb,IAAK5F,IAAIqB,EAAI,EAAG8I,EAAI1L,KAAKyJ,SAAS5D,OAAQjD,EAAI8I,EAAG9I,IAE7C5C,KAAKyJ,SAAS7G,GAAGsE,OAAOC,GAG5BA,EAAS4E,MAAMC,QAEX1I,GAEA6D,EAAS7D,KAAK6I,IAAInM,KAAMA,KAAKqF,OAG7BP,GAAW9E,KAAK+E,iBAAmB/E,KAAK+E,gBAAgBc,QAExDsB,EAAS+E,OAAOC,mBAUxBL,iBAAQ3E,iBAkBRgB,iBAAQiE,GAEJjI,YAAMgE,mBAENnI,KAAKkJ,WAAY,EAEjBjH,IAAMoK,EAAqC,kBAAZD,EAAwBA,EAAUA,GAAWA,EAAQ3C,SAE9E6C,EAActM,KAAKiL,eAAe,EAAGjL,KAAKyJ,SAAS5D,QAEzD,GAAIwG,EAEA,IAAK9K,IAAIqB,EAAI,EAAGA,EAAI0J,EAAYzG,SAAUjD,EAEtC0J,EAAY1J,GAAGuF,QAAQiE,IAUnC1D,EAAI5H,qBAEA,OAAOd,KAAKgI,MAAMpH,EAAIZ,KAAKwG,iBAAiB1F,OAGhD4H,EAAI5H,mBAAM6H,GAEN1G,IAAMnB,EAAQd,KAAKwG,iBAAiB1F,MAIhCd,KAAKgI,MAAMpH,EAFD,IAAVE,EAEe6H,EAAQ7H,EAIR,EAGnBd,KAAKuM,OAAS5D,GAQlBD,EAAI3H,sBAEA,OAAOf,KAAKgI,MAAMnH,EAAIb,KAAKwG,iBAAiBzF,QAGhD2H,EAAI3H,oBAAO4H,GAEP1G,IAAMlB,EAASf,KAAKwG,iBAAiBzF,OAIjCf,KAAKgI,MAAMnH,EAFA,IAAXE,EAEe4H,EAAQ5H,EAIR,EAGnBf,KAAKwM,QAAU7D,6CAloBQzE,UAuoB/BsF,EAAUxD,UAAUyG,yBAA2BjD,EAAUxD,UAAUG"}