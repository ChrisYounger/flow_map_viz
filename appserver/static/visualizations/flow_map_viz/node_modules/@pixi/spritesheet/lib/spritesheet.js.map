{"version":3,"file":"spritesheet.js","sources":["../src/Spritesheet.js","../src/SpritesheetLoader.js"],"sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { Texture } from '@pixi/core';\nimport { getResolutionOfUrl } from '@pixi/utils';\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @class\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /**\n     * The maximum number of Textures to build per process.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    static get BATCH_SIZE()\n    {\n        return 1000;\n    }\n\n    /**\n     * @param {PIXI.BaseTexture} baseTexture Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param {string} [resolutionFilename] - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(baseTexture, data, resolutionFilename = null)\n    {\n        /**\n         * Reference to ths source texture\n         * @type {PIXI.BaseTexture}\n         */\n        this.baseTexture = baseTexture;\n\n        /**\n         * A map containing all textures of the sprite sheet.\n         * Can be used to create a {@link PIXI.Sprite|Sprite}:\n         * ```js\n         * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n         * ```\n         * @member {Object}\n         */\n        this.textures = {};\n\n        /**\n         * A map containing the textures for each animation.\n         * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n         * ```js\n         * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n         * ```\n         * @member {Object}\n         */\n        this.animations = {};\n\n        /**\n         * Reference to the original JSON data.\n         * @type {Object}\n         */\n        this.data = data;\n\n        /**\n         * The resolution of the spritesheet.\n         * @type {number}\n         */\n        this.resolution = this._updateResolution(\n            resolutionFilename\n            || (this.baseTexture.resource ? this.baseTexture.resource.url : null)\n        );\n\n        /**\n         * Map of spritesheet frames.\n         * @type {Object}\n         * @private\n         */\n        this._frames = this.data.frames;\n\n        /**\n         * Collection of frame names.\n         * @type {string[]}\n         * @private\n         */\n        this._frameKeys = Object.keys(this._frames);\n\n        /**\n         * Current batch index being processed.\n         * @type {number}\n         * @private\n         */\n        this._batchIndex = 0;\n\n        /**\n         * Callback when parse is completed.\n         * @type {Function}\n         * @private\n         */\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @private\n     * @param {string} resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return {number} Resolution to use for spritesheet.\n     */\n    _updateResolution(resolutionFilename)\n    {\n        const scale = this.data.meta.scale;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    parse(callback)\n    {\n        this._batchIndex = 0;\n        this._callback = callback;\n\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n        {\n            this._processFrames(0);\n            this._processAnimations();\n            this._parseComplete();\n        }\n        else\n        {\n            this._nextBatch();\n        }\n    }\n\n    /**\n     * Process a batch of frames\n     *\n     * @private\n     * @param {number} initialFrameIndex - The index of frame to start.\n     */\n    _processFrames(initialFrameIndex)\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /**\n     * Parse animations config\n     *\n     * @private\n     */\n    _processAnimations()\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /**\n     * The parse has completed.\n     *\n     * @private\n     */\n    _parseComplete()\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /**\n     * Begin the next batch of textures.\n     *\n     * @private\n     */\n    _nextBatch()\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase = false)\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this.baseTexture.destroy();\n        }\n        this.baseTexture = null;\n    }\n}\n","import { url } from '@pixi/utils';\nimport { LoaderResource } from '@pixi/loaders';\nimport { Spritesheet } from './Spritesheet';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class SpritesheetLoader\n{\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(resource, next)\n    {\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || this.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, this.baseUrl);\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture.baseTexture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     * @param {PIXI.LoaderResource} resource - Resource to check path\n     * @param {string} baseUrl - Base root url\n     */\n    static getResourcePath(resource, baseUrl)\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"],"names":["getResolutionOfUrl","let","const","Rectangle","Texture","this","LoaderResource","url"],"mappings":"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"}