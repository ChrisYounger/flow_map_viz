{"version":3,"file":"loaders.js","sources":["../src/TextureLoader.js","../src/Loader.js","../src/AppLoaderPlugin.js","../src/index.js"],"sourcesContent":["import { Resource } from 'resource-loader';\nimport { Texture } from '@pixi/core';\n\n/**\n * Loader plugin for handling Texture resources.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class TextureLoader\n{\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(resource, next)\n    {\n        // create a new texture if the data is an Image object\n        if (resource.data && resource.type === Resource.TYPE.IMAGE)\n        {\n            resource.texture = Texture.fromLoader(\n                resource.data,\n                resource.url,\n                resource.name\n            );\n        }\n        next();\n    }\n}\n","import { Loader as ResourceLoader, middleware } from 'resource-loader';\nimport { EventEmitter } from '@pixi/utils';\nimport { TextureLoader } from './TextureLoader';\n\n/**\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.Loader.shared; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class Loader\n * @memberof PIXI\n * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n * @param {number} [concurrency=10] - The number of resources to load concurrently.\n */\nexport class Loader extends ResourceLoader\n{\n    constructor(baseUrl, concurrency)\n    {\n        super(baseUrl, concurrency);\n        EventEmitter.call(this);\n\n        for (let i = 0; i < Loader._plugins.length; ++i)\n        {\n            const plugin = Loader._plugins[i];\n            const { pre, use } = plugin;\n\n            if (pre)\n            {\n                this.pre(pre);\n            }\n\n            if (use)\n            {\n                this.use(use);\n            }\n        }\n\n        // Compat layer, translate the new v2 signals into old v1 events.\n        this.onStart.add((l) => this.emit('start', l));\n        this.onProgress.add((l, r) => this.emit('progress', l, r));\n        this.onError.add((e, l, r) => this.emit('error', e, l, r));\n        this.onLoad.add((l, r) => this.emit('load', l, r));\n        this.onComplete.add((l, r) => this.emit('complete', l, r));\n\n        /**\n         * If this loader cannot be destroyed.\n         * @member {boolean}\n         * @default false\n         * @private\n         */\n        this._protected = false;\n    }\n\n    /**\n     * Destroy the loader, removes references.\n     * @private\n     */\n    destroy()\n    {\n        if (!this._protected)\n        {\n            this.removeAllListeners();\n            this.reset();\n        }\n    }\n\n    /**\n     * A premade instance of the loader that can be used to load resources.\n     * @name shared\n     * @type {PIXI.Loader}\n     * @static\n     * @memberof PIXI.Loader\n     */\n    static get shared()\n    {\n        let shared = Loader._shared;\n\n        if (!shared)\n        {\n            shared = new Loader();\n            shared._protected = true;\n            Loader._shared = shared;\n        }\n\n        return shared;\n    }\n}\n\n// Copy EE3 prototype (mixin)\nObject.assign(Loader.prototype, EventEmitter.prototype);\n\n/**\n * Collection of all installed `use` middleware for Loader.\n *\n * @static\n * @member {Array<PIXI.ILoaderPlugin>} _plugins\n * @memberof PIXI.Loader\n * @private\n */\nLoader._plugins = [];\n\n/**\n * Adds a Loader plugin for the global shared loader and all\n * new Loader instances created.\n *\n * @static\n * @method registerPlugin\n * @memberof PIXI.Loader\n * @param {PIXI.ILoaderPlugin} plugin - The plugin to add\n * @return {PIXI.Loader} Reference to PIXI.Loader for chaining\n */\nLoader.registerPlugin = function registerPlugin(plugin)\n{\n    Loader._plugins.push(plugin);\n\n    if (plugin.add)\n    {\n        plugin.add();\n    }\n\n    return Loader;\n};\n\n// parse any blob into more usable objects (e.g. Image)\nLoader.registerPlugin({ use: middleware.parsing });\n\n// parse any Image objects into textures\nLoader.registerPlugin(TextureLoader);\n\n/**\n * Plugin to be installed for handling specific Loader resources.\n *\n * @memberof PIXI\n * @typedef ILoaderPlugin\n * @property {function} [add] - Function to call immediate after registering plugin.\n * @property {PIXI.Loader.loaderMiddleware} [pre] - Middleware function to run before load, the\n *           arguments for this are `(resource, next)`\n * @property {PIXI.Loader.loaderMiddleware} [use] - Middleware function to run after load, the\n *           arguments for this are `(resource, next)`\n */\n\n/**\n * @memberof PIXI.Loader\n * @callback loaderMiddleware\n * @param {PIXI.LoaderResource} resource\n * @param {function} next\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onStart\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onProgress\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onError\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onLoad\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onComplete\n */\n","import { Loader } from './Loader';\n\n/**\n * Application plugin for supporting loader option. Installing the LoaderPlugin\n * is not necessary if using **pixi.js** or **pixi.js-legacy**.\n * @example\n * import {AppLoaderPlugin} from '@pixi/loaders';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(AppLoaderPlugin);\n * @class\n * @memberof PIXI\n */\nexport class AppLoaderPlugin\n{\n    /**\n     * Called on application constructor\n     * @param {object} options\n     * @private\n     */\n    static init(options)\n    {\n        options = Object.assign({\n            sharedLoader: false,\n        }, options);\n\n        /**\n         * Loader instance to help with asset loading.\n         * @name PIXI.Application#loader\n         * @type {PIXI.Loader}\n         * @readonly\n         */\n        this.loader = options.sharedLoader ? Loader.shared : new Loader();\n    }\n\n    /**\n     * Called when application destroyed\n     * @private\n     */\n    static destroy()\n    {\n        if (this.loader)\n        {\n            this.loader.destroy();\n            this.loader = null;\n        }\n    }\n}\n","import { Resource } from 'resource-loader';\n/**\n * Reference to **{@link https://github.com/englercj/resource-loader\n * resource-loader}**'s Resource class.\n * @see http://englercj.github.io/resource-loader/Resource.html\n * @class LoaderResource\n * @memberof PIXI\n */\nexport const LoaderResource = Resource;\nexport * from './Loader';\nexport * from './TextureLoader';\nexport * from './AppLoaderPlugin';\n"],"names":["Resource","Texture","super","EventEmitter","let","const","this","ResourceLoader","middleware"],"mappings":";;;;;;;;;;;;;;;;;;;;;AASA,IAAa,aAAa;;cAQf,oBAAI,QAAQ,EAAE,IAAI;AAC7B;;IAEQ,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAKA,uBAAQ,CAAC,IAAI,CAAC,KAAK;IAC9D;QACQ,QAAQ,CAAC,OAAO,GAAGC,YAAO,CAAC,UAAU;YACrC,QAAY,CAAC,IAAI;YACjB,QAAY,CAAC,GAAG;YAChB,QAAY,CAAC,IAAI;SAChB,CAAC;KACL;IACL,IAAQ,EAAE,CAAC;CACV,CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyBD,IAAa,MAAM;IAEf,eAAW,CAAC,OAAO,EAAE,WAAW;IAChC;;;QACIC,mBAAK,OAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC5BC,kBAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;QAExB,KAAKC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC;QAC/C;YACIC,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAClC;YAAa,qBAAe;;YAE5B,IAAI,GAAG;YACP;gBACI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;;YAED,IAAI,GAAG;YACP;gBACI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;SACJ;;;QAGD,IAAI,CAAC,OAAO,CAAC,GAAG,WAAE,CAAC,EAAE,SAAGC,MAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,UAAU,CAAC,GAAG,WAAE,CAAC,EAAE,CAAC,EAAE,SAAGA,MAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,IAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,GAAG,WAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAGA,MAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,MAAM,CAAC,GAAG,WAAE,CAAC,EAAE,CAAC,EAAE,SAAGA,MAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,IAAC,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,CAAC,GAAG,WAAE,CAAC,EAAE,CAAC,EAAE,SAAGA,MAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,IAAC,CAAC,CAAC;;;;;;;;QAQ3D,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;;;;;;;6DAC3B;;;;;;qBAMD;IACA;QACI,IAAI,CAAC,IAAI,CAAC,UAAU;QACpB;YACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,KAAK,EAAE,CAAC;SAChB;MACJ;;;;;;;;;IASD,gBAAW;IACX;QACIF,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;;QAE5B,IAAI,CAAC,MAAM;QACX;YACI,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;YACtB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;YACzB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;SAC3B;;QAED,OAAO,MAAM,CAAC;KACjB;;;;;EAvEuBG,wBAwE3B;;;AAGD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAEJ,kBAAY,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;AAUxD,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;;;;;;;;;;;;AAYrB,MAAM,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM;AACtD;IACI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;IAE7B,IAAI,MAAM,CAAC,GAAG;IACd;QACI,MAAM,CAAC,GAAG,EAAE,CAAC;KAChB;;IAED,OAAO,MAAM,CAAC;CACjB,CAAC;;;AAGF,MAAM,CAAC,cAAc,CAAC,EAAE,GAAG,EAAEK,yBAAU,CAAC,OAAO,EAAE,CAAC,CAAC;;;AAGnD,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5JrC,IAAa,eAAe;;gBAOjB,sBAAK,OAAO;AACvB;IACQ,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,YAAgB,EAAE,KAAK;KACtB,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAQZ,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;EACrE;;;;;;AAML,gBAAW;AACX;IACI,IAAQ,IAAI,CAAC,MAAM;IACnB;QACQ,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACtB;CACJ,CACJ;;;;;;;;;ACtCD,AAAY,IAAC,cAAc,GAAGR;;;;;;;"}