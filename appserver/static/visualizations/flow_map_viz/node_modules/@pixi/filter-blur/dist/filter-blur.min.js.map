{"version":3,"file":"filter-blur.min.js","sources":["../src/generateBlurVertSource.js","../src/generateBlurFragSource.js","../src/BlurFilterPass.js","../src/BlurFilter.js"],"sourcesContent":["const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize, x)\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n    // let value;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        // value = i;\n\n        // if(i >= halfLength)\n        // {\n        //     value = kernelSize - i - 1;\n        // }\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize);\n\n    return vertSource;\n}\n","const GAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize)\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value]);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize);\n\n    return fragSource;\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { generateBlurVertSource } from './generateBlurVertSource';\nimport { generateBlurFragSource } from './generateBlurFragSource';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilterPass extends Filter\n{\n    /**\n     * @param {boolean} horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal, strength, quality, resolution, kernelSize)\n    {\n        kernelSize = kernelSize || 5;\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n\n        this.blur = strength || 8;\n    }\n\n    apply(filterManager, input, output, clear)\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, true);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                renderer.renderTexture.bind(flip, flip.filterFrame);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clear);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { BlurFilterPass } from './BlurFilterPass';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilter extends Filter\n{\n    /**\n     * @param {number} [strength=8] - The strength of the blur filter.\n     * @param {number} [quality=4] - The quality of the blur filter.\n     * @param {number} [resolution] - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution || settings.RESOLUTION;\n        this.quality = quality || 4;\n        this.blur = strength || 8;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     */\n    apply(filterManager, input, output, clear)\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, true);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clear);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clear);\n        }\n    }\n\n    updatePadding()\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n    get quality()\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY()\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode()\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     *\n     * @member {bool}\n     * @default false\n     */\n    get repeatEdgePixels()\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"names":["const","vertTemplate","GAUSSIAN_VALUES","5","7","9","11","13","15","fragTemplate","join","BlurFilterPass","horizontal","strength","quality","resolution","kernelSize","vertSrc","x","template","halfLength","Math","ceil","vertSource","blurLoop","let","i","blur","replace","generateBlurVertSource","fragSrc","value","kernel","length","fragSource","generateBlurFragSource","super","this","settings","RESOLUTION","_quality","apply","filterManager","input","output","clear","uniforms","width","height","renderer","passes","applyFilter","renderTarget","getFilterTexture","flip","flop","state","blend","renderTexture","bind","filterFrame","uSampler","temp","shader","geometry","draw","returnFilterTexture","prototypeAccessors","padding","abs","Filter","BlurFilter","blurXFilter","blurYFilter","repeatEdgePixels","xStrength","yStrength","updatePadding","_repeatEdgePixels","max","blurX","blurY","blendMode"],"mappings":"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"}