{"version":3,"file":"filter-blur.js","sources":["../src/generateBlurVertSource.js","../src/generateBlurFragSource.js","../src/BlurFilterPass.js","../src/BlurFilter.js"],"sourcesContent":["const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize, x)\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n    // let value;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        // value = i;\n\n        // if(i >= halfLength)\n        // {\n        //     value = kernelSize - i - 1;\n        // }\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize);\n\n    return vertSource;\n}\n","const GAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize)\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value]);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize);\n\n    return fragSource;\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { generateBlurVertSource } from './generateBlurVertSource';\nimport { generateBlurFragSource } from './generateBlurFragSource';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilterPass extends Filter\n{\n    /**\n     * @param {boolean} horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal, strength, quality, resolution, kernelSize)\n    {\n        kernelSize = kernelSize || 5;\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n\n        this.blur = strength || 8;\n    }\n\n    apply(filterManager, input, output, clear)\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, true);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                renderer.renderTexture.bind(flip, flip.filterFrame);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clear);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { BlurFilterPass } from './BlurFilterPass';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilter extends Filter\n{\n    /**\n     * @param {number} [strength=8] - The strength of the blur filter.\n     * @param {number} [quality=4] - The quality of the blur filter.\n     * @param {number} [resolution] - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution || settings.RESOLUTION;\n        this.quality = quality || 4;\n        this.blur = strength || 8;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     */\n    apply(filterManager, input, output, clear)\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, true);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clear);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clear);\n        }\n    }\n\n    updatePadding()\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n    get quality()\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY()\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode()\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     *\n     * @member {bool}\n     * @default false\n     */\n    get repeatEdgePixels()\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"names":["const","let","super","settings","Filter"],"mappings":"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"}