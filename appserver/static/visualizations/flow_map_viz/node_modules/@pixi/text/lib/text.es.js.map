{"version":3,"file":"text.es.js","sources":["../src/const.js","../src/TextStyle.js","../src/TextMetrics.js","../src/Text.js"],"sourcesContent":["/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport const TEXT_GRADIENT = {\n    LINEAR_VERTICAL: 0,\n    LINEAR_HORIZONTAL: 1,\n};\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n]\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align()\n    {\n        return this._align;\n    }\n    set align(align) // eslint-disable-line require-jsdoc\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) // eslint-disable-line require-jsdoc\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) // eslint-disable-line require-jsdoc\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) // eslint-disable-line require-jsdoc\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) // eslint-disable-line require-jsdoc\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading()\n    {\n        return this._leading;\n    }\n    set leading(leading) // eslint-disable-line require-jsdoc\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) // eslint-disable-line require-jsdoc\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding) // eslint-disable-line require-jsdoc\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) // eslint-disable-line require-jsdoc\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) // eslint-disable-line require-jsdoc\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim) // eslint-disable-line require-jsdoc\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace()\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace) // eslint-disable-line require-jsdoc\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString()\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the properties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        /**\n         * The text that was measured\n         *\n         * @member {string}\n         */\n        this.text = text;\n\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle}\n         */\n        this.style = style;\n\n        /**\n         * The measured width of the text\n         *\n         * @member {number}\n         */\n        this.width = width;\n\n        /**\n         * The measured height of the text\n         *\n         * @member {number}\n         */\n        this.height = height;\n\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]}\n         */\n        this.lines = lines;\n\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]}\n         */\n        this.lineWidths = lineWidths;\n\n        /**\n         * The measured line height for this style\n         *\n         * @member {number}\n         */\n        this.lineHeight = lineHeight;\n\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number}\n         */\n        this.maxLineWidth = maxLineWidth;\n\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics}\n         */\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize;\n            fontProperties.ascent = style.fontSize;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {string[]}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  {string}  token The token to split\n     * @return {string[]} The characters of the token\n     */\n    static wordWrapSplit(token)\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.IFontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = (() =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nconst defaultDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text, style, canvas)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default 1\n         */\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text and updates it when needed.\n     *\n     * @private\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * this._resolution);\n        this.canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX;\n        let linePositionY;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            const dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n            const dsOffsetShadow = dsOffsetText * this.resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines);\n                context.strokeStyle = style.stroke;\n\n                context.shadowColor = 0;\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    drawLetterSpacing(text, x, y, isStroke = false)\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Method to be called upon a TextStyle change.\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    _generateFillStyle(style, lines)\n    {\n        if (!Array.isArray(style.fill))\n        {\n            return style.fill;\n        }\n        else if (style.fill.length === 1)\n        {\n            return style.fill[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient;\n        let totalIterations;\n        let currentIteration;\n        let stop;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        const width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection;\n        const height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection;\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = style.fill.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(style.fill[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(style.fill[style.fill.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n            totalIterations = (fill.length + 1) * lines.length;\n            currentIteration = 0;\n            for (let i = 0; i < lines.length; i++)\n            {\n                currentIteration += 1;\n                for (let j = 0; j < fill.length; j++)\n                {\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        stop = (fillGradientStops[j] / lines.length) + (i / lines.length);\n                    }\n                    else\n                    {\n                        stop = currentIteration / totalIterations;\n                    }\n                    gradient.addColorStop(stop, fill[j]);\n                    currentIteration++;\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(0, height / 2, width, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            totalIterations = fill.length + 1;\n            currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution()\n    {\n        return this._resolution;\n    }\n\n    set resolution(value) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"names":["const","let","j","super","i"],"mappings":"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"}