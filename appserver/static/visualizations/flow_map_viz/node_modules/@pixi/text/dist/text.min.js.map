{"version":3,"file":"text.min.js","sources":["../src/const.js","../src/TextStyle.js","../src/TextMetrics.js","../src/Text.js"],"sourcesContent":["/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport const TEXT_GRADIENT = {\n    LINEAR_VERTICAL: 0,\n    LINEAR_HORIZONTAL: 1,\n};\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n]\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align()\n    {\n        return this._align;\n    }\n    set align(align) // eslint-disable-line require-jsdoc\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) // eslint-disable-line require-jsdoc\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) // eslint-disable-line require-jsdoc\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) // eslint-disable-line require-jsdoc\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) // eslint-disable-line require-jsdoc\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading()\n    {\n        return this._leading;\n    }\n    set leading(leading) // eslint-disable-line require-jsdoc\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) // eslint-disable-line require-jsdoc\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding) // eslint-disable-line require-jsdoc\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) // eslint-disable-line require-jsdoc\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) // eslint-disable-line require-jsdoc\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim) // eslint-disable-line require-jsdoc\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace()\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace) // eslint-disable-line require-jsdoc\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString()\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the properties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        /**\n         * The text that was measured\n         *\n         * @member {string}\n         */\n        this.text = text;\n\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle}\n         */\n        this.style = style;\n\n        /**\n         * The measured width of the text\n         *\n         * @member {number}\n         */\n        this.width = width;\n\n        /**\n         * The measured height of the text\n         *\n         * @member {number}\n         */\n        this.height = height;\n\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]}\n         */\n        this.lines = lines;\n\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]}\n         */\n        this.lineWidths = lineWidths;\n\n        /**\n         * The measured line height for this style\n         *\n         * @member {number}\n         */\n        this.lineHeight = lineHeight;\n\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number}\n         */\n        this.maxLineWidth = maxLineWidth;\n\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics}\n         */\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize;\n            fontProperties.ascent = style.fontSize;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {string[]}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  {string}  token The token to split\n     * @return {string[]} The characters of the token\n     */\n    static wordWrapSplit(token)\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.IFontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = (() =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nconst defaultDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text, style, canvas)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default 1\n         */\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text and updates it when needed.\n     *\n     * @private\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * this._resolution);\n        this.canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX;\n        let linePositionY;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            const dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n            const dsOffsetShadow = dsOffsetText * this.resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines);\n                context.strokeStyle = style.stroke;\n\n                context.shadowColor = 0;\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    drawLetterSpacing(text, x, y, isStroke = false)\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Method to be called upon a TextStyle change.\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    _generateFillStyle(style, lines)\n    {\n        if (!Array.isArray(style.fill))\n        {\n            return style.fill;\n        }\n        else if (style.fill.length === 1)\n        {\n            return style.fill[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient;\n        let totalIterations;\n        let currentIteration;\n        let stop;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        const width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection;\n        const height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection;\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = style.fill.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(style.fill[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(style.fill[style.fill.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n            totalIterations = (fill.length + 1) * lines.length;\n            currentIteration = 0;\n            for (let i = 0; i < lines.length; i++)\n            {\n                currentIteration += 1;\n                for (let j = 0; j < fill.length; j++)\n                {\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        stop = (fillGradientStops[j] / lines.length) + (i / lines.length);\n                    }\n                    else\n                    {\n                        stop = currentIteration / totalIterations;\n                    }\n                    gradient.addColorStop(stop, fill[j]);\n                    currentIteration++;\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(0, height / 2, width, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            totalIterations = fill.length + 1;\n            currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution()\n    {\n        return this._resolution;\n    }\n\n    set resolution(value) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"names":["TEXT_GRADIENT","LINEAR_VERTICAL","LINEAR_HORIZONTAL","defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","leading","genericFontFamilies","TextStyle","style","this","styleID","reset","deepCopyProperties","getSingleColor","color","hex2string","indexOf","replace","getColor","Array","isArray","let","i","length","target","source","propertyObj","const","prop","slice","clone","clonedProperties","prototypeAccessors","_align","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","array1","array2","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_whiteSpace","_wordWrap","_wordWrapWidth","toFontString","fontSizeString","fontFamilies","split","test","join","TextMetrics","text","width","height","lines","lineWidths","maxLineWidth","fontProperties","measureText","canvas","_canvas","font","measureFont","ascent","context","getContext","lineWidth","max","line","cache","collapseSpaces","collapseNewlines","canPrependSpaces","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","characters","wordWrapSplit","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","undefined","spacing","_newlines","charCodeAt","_breakingSpaces","push","index","_fonts","properties","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","BASELINE_MULTIPLIER","fillStyle","fillRect","fillText","imagedata","getImageData","data","pixels","idx","stop","descent","clearMetrics","c","OffscreenCanvas","document","createElement","ex","defaultDestroyOptions","texture","children","baseTexture","Text","Texture","from","orig","Rectangle","super","_resolution","settings","RESOLUTION","_autoResolution","_text","_style","_styleListener","_font","localStyleID","updateText","respectDirty","dirty","linePositionX","linePositionY","measured","scale","clearRect","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","resolution","strokeStyle","rgb","hex2rgb","string2hex","shadowColor","shadowBlur","shadowOffsetX","cos","shadowOffsetY","sin","_generateFillStyle","drawLetterSpacing","updateTexture","x","y","isStroke","currentPosition","stringArray","previousWidth","currentWidth","currentChar","strokeText","substring","trimmed","trimCanvas","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","_render","renderer","getLocalBounds","rect","call","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","_onStyleChange","gradient","totalIterations","currentIteration","dropShadowCorrection","lengthPlus1","unshift","createLinearGradient","addColorStop","destroy","options","Object","assign","abs","value","s","sign","_width","_height","String","Sprite"],"mappings":"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"}