{"version":3,"file":"text.js","sources":["../src/const.js","../src/TextStyle.js","../src/TextMetrics.js","../src/Text.js"],"sourcesContent":["/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport const TEXT_GRADIENT = {\n    LINEAR_VERTICAL: 0,\n    LINEAR_HORIZONTAL: 1,\n};\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n]\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align()\n    {\n        return this._align;\n    }\n    set align(align) // eslint-disable-line require-jsdoc\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) // eslint-disable-line require-jsdoc\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) // eslint-disable-line require-jsdoc\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) // eslint-disable-line require-jsdoc\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) // eslint-disable-line require-jsdoc\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading()\n    {\n        return this._leading;\n    }\n    set leading(leading) // eslint-disable-line require-jsdoc\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) // eslint-disable-line require-jsdoc\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding) // eslint-disable-line require-jsdoc\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) // eslint-disable-line require-jsdoc\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) // eslint-disable-line require-jsdoc\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim) // eslint-disable-line require-jsdoc\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace()\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace) // eslint-disable-line require-jsdoc\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString()\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the properties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        /**\n         * The text that was measured\n         *\n         * @member {string}\n         */\n        this.text = text;\n\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle}\n         */\n        this.style = style;\n\n        /**\n         * The measured width of the text\n         *\n         * @member {number}\n         */\n        this.width = width;\n\n        /**\n         * The measured height of the text\n         *\n         * @member {number}\n         */\n        this.height = height;\n\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]}\n         */\n        this.lines = lines;\n\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]}\n         */\n        this.lineWidths = lineWidths;\n\n        /**\n         * The measured line height for this style\n         *\n         * @member {number}\n         */\n        this.lineHeight = lineHeight;\n\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number}\n         */\n        this.maxLineWidth = maxLineWidth;\n\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics}\n         */\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize;\n            fontProperties.ascent = style.fontSize;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {string[]}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  {string}  token The token to split\n     * @return {string[]} The characters of the token\n     */\n    static wordWrapSplit(token)\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.IFontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = (() =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nconst defaultDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text, style, canvas)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default 1\n         */\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text and updates it when needed.\n     *\n     * @private\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * this._resolution);\n        this.canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX;\n        let linePositionY;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            const dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n            const dsOffsetShadow = dsOffsetText * this.resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines);\n                context.strokeStyle = style.stroke;\n\n                context.shadowColor = 0;\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    drawLetterSpacing(text, x, y, isStroke = false)\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Method to be called upon a TextStyle change.\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    _generateFillStyle(style, lines)\n    {\n        if (!Array.isArray(style.fill))\n        {\n            return style.fill;\n        }\n        else if (style.fill.length === 1)\n        {\n            return style.fill[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient;\n        let totalIterations;\n        let currentIteration;\n        let stop;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        const width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection;\n        const height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection;\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = style.fill.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(style.fill[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(style.fill[style.fill.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n            totalIterations = (fill.length + 1) * lines.length;\n            currentIteration = 0;\n            for (let i = 0; i < lines.length; i++)\n            {\n                currentIteration += 1;\n                for (let j = 0; j < fill.length; j++)\n                {\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        stop = (fillGradientStops[j] / lines.length) + (i / lines.length);\n                    }\n                    else\n                    {\n                        stop = currentIteration / totalIterations;\n                    }\n                    gradient.addColorStop(stop, fill[j]);\n                    currentIteration++;\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(0, height / 2, width, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            totalIterations = fill.length + 1;\n            currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution()\n    {\n        return this._resolution;\n    }\n\n    set resolution(value) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"],"names":["const","let","hex2string","j","Texture","Rectangle","super","settings","hex2rgb","string2hex","i","trimCanvas","sign","Sprite"],"mappings":"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"}