{"version":3,"file":"mesh-extras.min.js","sources":["../src/geometry/PlaneGeometry.js","../src/geometry/RopeGeometry.js","../src/SimpleRope.js","../src/SimplePlane.js","../src/SimpleMesh.js","../src/NineSlicePlane.js"],"sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\nexport class PlaneGeometry extends MeshGeometry\n{\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build()\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { MeshGeometry } from '@pixi/mesh';\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /**\n     * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n     * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points, textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]}\n         */\n        this.points = points;\n\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        this.width = width;\n\n        /**\n         * Rope texture scale, if zero then the rope texture is stretched.\n         * @member {number}\n         * @readOnly\n         */\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n    /**\n     * Refreshes Rope indices and uvs\n     * @private\n     */\n    build()\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this.width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    updateVertices()\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.textureScale > 0 ? this.textureScale * this.width / 2 : this.width / 2;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    update()\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n","import { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { RopeGeometry } from './geometry/RopeGeometry';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport class SimpleRope extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the rope.\n     * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be streched instead.\n     */\n    constructor(texture, points, textureScale = 0)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        const meshMaterial = new MeshMaterial(texture);\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer)\n    {\n        if (this.autoUpdate\n            || this.geometry.width !== this.shader.texture.height)\n        {\n            this.geometry.width = this.shader.texture.height;\n            this.geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport class SimplePlane extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the SimplePlane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture, verticesX, verticesY)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    textureUpdated()\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        this.geometry.width = this.shader.texture.width;\n        this.geometry.height = this.shader.texture.height;\n\n        this.geometry.build();\n    }\n\n    set texture(value)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture()\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer)\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Texture } from '@pixi/core';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} [texture=Texture.EMPTY] - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(texture = Texture.EMPTY, vertices, uvs, indices, drawMode)\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        /**\n         * upload vertices buffer each frame\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @member {Float32Array}\n     */\n    get vertices()\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer)\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] size of the left vertical bar (A)\n     * @param {number} [topHeight=10] size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] size of the bottom horizontal bar (D)\n     */\n    constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight)\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @private\n         */\n        this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @private\n         */\n        this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @private\n         */\n        this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @private\n         */\n        this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    textureUpdated()\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices()\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    updateHorizontalVertices()\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    updateVerticalVertices()\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     *\n     * @return {number} Smaller number of vertical and horizontal scale.\n     * @private\n     */\n    _getMinScale()\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth()\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth()\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight()\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight()\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    _refresh()\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"],"names":["PlaneGeometry","width","height","segWidth","segHeight","super","this","build","const","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update","MeshGeometry","RopeGeometry","points","textureScale","length","vertexBuffer","getBuffer","uvBuffer","getIndex","let","amount","prev","textureWidth","index","dx","dy","distance","Math","sqrt","indexCount","updateVertices","nextPoint","lastPoint","perpX","perpY","vertices","point","ratio","perpLength","num","SimpleRope","texture","ropeGeometry","meshMaterial","MeshMaterial","baseTexture","wrapMode","WRAP_MODES","REPEAT","autoUpdate","_render","renderer","geometry","shader","Mesh","SimplePlane","verticesX","verticesY","planeGeometry","Texture","WHITE","textureUpdated","_textureID","_updateID","prototypeAccessors","valid","once","SimpleMesh","drawMode","EMPTY","static","DEFAULT_BORDER_SIZE","NineSlicePlane","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","_origHeight","_width","_height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_refresh","updateHorizontalVertices","scale","_getMinScale","updateVerticalVertices","w","scaleW","h","scaleH","min","_uvw","_uvh"],"mappings":"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"}