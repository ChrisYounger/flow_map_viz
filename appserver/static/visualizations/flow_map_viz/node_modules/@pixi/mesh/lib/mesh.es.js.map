{"version":3,"file":"mesh.es.js","sources":["../src/MeshBatchUvs.js","../src/Mesh.js","../src/MeshMaterial.js","../src/MeshGeometry.js"],"sourcesContent":["/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer, uvMatrix)\n    {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n\n        this._textureUpdateId = -1;\n\n        this._updateID = 0;\n    }\n\n    /**\n     * updates\n     *\n     * @param {boolean} forceUpdate - force the update\n     */\n    update(forceUpdate)\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID)\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            this.data = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n","import { State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Mesh extends Container\n{\n    /**\n     * @param {PIXI.Geometry} geometry  the geometry the mesh will use\n     * @param {PIXI.Shader|PIXI.MeshMaterial} shader  the shader the mesh will use\n     * @param {PIXI.State} [state] the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    constructor(geometry, shader, state, drawMode = DRAW_MODES.TRIANGLES)// vertices, uvs, indices, drawMode)\n    {\n        super();\n\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        this.geometry = geometry;\n\n        geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        this.shader = shader;\n\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = state || State.for2d();\n\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        this.drawMode = drawMode;\n\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        this.start = 0;\n\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        this.size = 0;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        this.uvs = null;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indices = null;\n\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        this.vertexData = new Float32Array(1);\n\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        this.vertexDirty = 0;\n\n        this._transformID = -1;\n\n        // Inherited from DisplayMode, set defaults\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        this.batchUvs = null;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get uvBuffer()\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get verticesBuffer()\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /**\n     * Alias for {@link PIXI.Mesh#shader}.\n     * @member {PIXI.Shader|PIXI.MeshMaterial}\n     */\n    set material(value)\n    {\n        this.shader = value;\n    }\n\n    get material()\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels()\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this.shader.tint;\n    }\n\n    set tint(value)\n    {\n        this.shader.tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this.shader.texture;\n    }\n\n    set texture(value)\n    {\n        this.shader.texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    _render(renderer)\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n\n        // TODO benchmark check for attribute size..\n        if (this.shader.batchable && this.drawMode === DRAW_MODES.TRIANGLES && vertices.length < Mesh.BATCHABLE_SIZE * 2)\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    _renderDefault(renderer)\n    {\n        const shader = this.shader;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        if (shader.program.uniformData.translationMatrix)\n        {\n            shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        }\n\n        // bind and sync uniforms..\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    _renderToBatch(renderer)\n    {\n        const geometry = this.geometry;\n\n        if (this.shader.uvMatrix)\n        {\n            this.shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data;\n        this._tintRGB = this.shader._tintRGB;\n        this._texture = this.shader.texture;\n\n        const pluginName = this.material.pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    calculateVertices()\n    {\n        const geometry = this.geometry;\n        const vertices = geometry.buffers[0].data;\n\n        if (geometry.vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = geometry.vertexDirtyId;\n    }\n\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    calculateUvs()\n    {\n        const geomUvs = this.geometry.buffers[1];\n\n        if (!this.shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, this.shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.Point} point the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n}\n\n/**\n * The maximum number of vertices to consider batchable. Generally, the complexity\n * of the geometry.\n * @memberof PIXI.Mesh\n * @static\n * @member {number} BATCHABLE_SIZE\n */\nMesh.BATCHABLE_SIZE = 100;\n","import { Shader, Program, TextureMatrix } from '@pixi/core';\nimport vertex from './shader/mesh.vert';\nimport fragment from './shader/mesh.frag';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport class MeshMaterial extends Shader\n{\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler, options)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        this._colorDirty = false;\n\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        this.uvMatrix = new TextureMatrix(uSampler);\n\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        this.batchable = options.program === undefined;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set alpha(value)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha()\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set tint(value)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint()\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    update()\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport class MeshGeometry extends Geometry\n{\n    /**\n     * @param {Float32Array|number[]} vertices - Positional data on geometry.\n     * @param {Float32Array|number[]} uvs - Texture UVs.\n     * @param {Uint16Array|number[]} index - IndexBuffer\n     */\n    constructor(vertices, uvs, index)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId()\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"],"names":["const","super","let","i"],"mappings":"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"}