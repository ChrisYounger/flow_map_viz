{"version":3,"file":"mesh.min.js","sources":["../src/MeshBatchUvs.js","../src/Mesh.js","../src/MeshMaterial.js","../src/MeshGeometry.js"],"sourcesContent":["/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer, uvMatrix)\n    {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n\n        this._textureUpdateId = -1;\n\n        this._updateID = 0;\n    }\n\n    /**\n     * updates\n     *\n     * @param {boolean} forceUpdate - force the update\n     */\n    update(forceUpdate)\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID)\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            this.data = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n","import { State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Mesh extends Container\n{\n    /**\n     * @param {PIXI.Geometry} geometry  the geometry the mesh will use\n     * @param {PIXI.Shader|PIXI.MeshMaterial} shader  the shader the mesh will use\n     * @param {PIXI.State} [state] the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    constructor(geometry, shader, state, drawMode = DRAW_MODES.TRIANGLES)// vertices, uvs, indices, drawMode)\n    {\n        super();\n\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        this.geometry = geometry;\n\n        geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        this.shader = shader;\n\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = state || State.for2d();\n\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        this.drawMode = drawMode;\n\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        this.start = 0;\n\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        this.size = 0;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        this.uvs = null;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indices = null;\n\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        this.vertexData = new Float32Array(1);\n\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        this.vertexDirty = 0;\n\n        this._transformID = -1;\n\n        // Inherited from DisplayMode, set defaults\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        this.batchUvs = null;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get uvBuffer()\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get verticesBuffer()\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /**\n     * Alias for {@link PIXI.Mesh#shader}.\n     * @member {PIXI.Shader|PIXI.MeshMaterial}\n     */\n    set material(value)\n    {\n        this.shader = value;\n    }\n\n    get material()\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels()\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this.shader.tint;\n    }\n\n    set tint(value)\n    {\n        this.shader.tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this.shader.texture;\n    }\n\n    set texture(value)\n    {\n        this.shader.texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    _render(renderer)\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n\n        // TODO benchmark check for attribute size..\n        if (this.shader.batchable && this.drawMode === DRAW_MODES.TRIANGLES && vertices.length < Mesh.BATCHABLE_SIZE * 2)\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    _renderDefault(renderer)\n    {\n        const shader = this.shader;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        if (shader.program.uniformData.translationMatrix)\n        {\n            shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        }\n\n        // bind and sync uniforms..\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    _renderToBatch(renderer)\n    {\n        const geometry = this.geometry;\n\n        if (this.shader.uvMatrix)\n        {\n            this.shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data;\n        this._tintRGB = this.shader._tintRGB;\n        this._texture = this.shader.texture;\n\n        const pluginName = this.material.pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    calculateVertices()\n    {\n        const geometry = this.geometry;\n        const vertices = geometry.buffers[0].data;\n\n        if (geometry.vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = geometry.vertexDirtyId;\n    }\n\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    calculateUvs()\n    {\n        const geomUvs = this.geometry.buffers[1];\n\n        if (!this.shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, this.shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.Point} point the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n}\n\n/**\n * The maximum number of vertices to consider batchable. Generally, the complexity\n * of the geometry.\n * @memberof PIXI.Mesh\n * @static\n * @member {number} BATCHABLE_SIZE\n */\nMesh.BATCHABLE_SIZE = 100;\n","import { Shader, Program, TextureMatrix } from '@pixi/core';\nimport vertex from './shader/mesh.vert';\nimport fragment from './shader/mesh.frag';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport class MeshMaterial extends Shader\n{\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler, options)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        this._colorDirty = false;\n\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        this.uvMatrix = new TextureMatrix(uSampler);\n\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        this.batchable = options.program === undefined;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set alpha(value)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha()\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set tint(value)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint()\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    update()\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport class MeshGeometry extends Geometry\n{\n    /**\n     * @param {Float32Array|number[]} vertices - Positional data on geometry.\n     * @param {Float32Array|number[]} uvs - Texture UVs.\n     * @param {Uint16Array|number[]} index - IndexBuffer\n     */\n    constructor(vertices, uvs, index)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId()\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"],"names":["MeshBatchUvs","uvBuffer","uvMatrix","this","data","_bufferUpdateId","_textureUpdateId","_updateID","update","forceUpdate","length","Float32Array","multiplyUvs","const","tempPoint","Point","tempPolygon","Polygon","Mesh","geometry","shader","state","drawMode","DRAW_MODES","TRIANGLES","super","refCount","State","for2d","start","size","uvs","indices","vertexData","vertexDirty","_transformID","tint","blendMode","BLEND_MODES","NORMAL","_roundPixels","settings","ROUND_PIXELS","batchUvs","prototypeAccessors","buffers","verticesBuffer","material","value","roundPixels","texture","_render","renderer","vertices","batchable","BATCHABLE_SIZE","_renderToBatch","_renderDefault","alpha","worldAlpha","batch","flush","program","uniformData","translationMatrix","uniforms","transform","worldTransform","toArray","bind","set","draw","instanceCount","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","setObjectRenderer","plugins","render","vertexDirtyId","_worldID","wt","a","b","c","d","tx","ty","i","x","y","resolution","RESOLUTION","Math","round","geomUvs","isSimple","_calculateBounds","_bounds","addVertexData","containsPoint","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","destroy","options","dispose","Container","MeshMaterial","uSampler","uTextureMatrix","Matrix","IDENTITY","uColor","Object","assign","Program","from","vertex","fragment","_colorDirty","TextureMatrix","undefined","_alpha","_tint","baseTexture","premultiplyTintToRgba","alphaMode","mapCoord","Shader","MeshGeometry","index","Buffer","uvsBuffer","addAttribute","TYPES","FLOAT","addIndex","_updateId","Geometry"],"mappings":"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"}