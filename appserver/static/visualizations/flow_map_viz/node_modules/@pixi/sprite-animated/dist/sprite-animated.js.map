{"version":3,"file":"sprite-animated.js","sources":["../src/AnimatedSprite.js"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.from(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let animatedSprite = new PIXI.AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   animatedSprite = new PIXI.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class AnimatedSprite extends Sprite\n{\n    /**\n     * @param {PIXI.Texture[]|PIXI.AnimatedSprite.FrameObject[]} textures - An array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation.\n     * @param {boolean} [autoUpdate=true] - Whether to use PIXI.Ticker.shared to auto update animation time.\n     */\n    constructor(textures, autoUpdate)\n    {\n        super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n\n        /**\n         * @type {PIXI.Texture[]}\n         * @private\n         */\n        this._textures = null;\n\n        /**\n         * @type {number[]}\n         * @private\n         */\n        this._durations = null;\n\n        this.textures = textures;\n\n        /**\n         * `true` uses PIXI.Ticker.shared to auto update animation time.\n         * @type {boolean}\n         * @default true\n         * @private\n         */\n        this._autoUpdate = autoUpdate !== false;\n\n        /**\n         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.animationSpeed = 1;\n\n        /**\n         * Whether or not the animate sprite repeats after playing.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.loop = true;\n\n        /**\n         * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n         *\n         * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n         * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n         * of the frame (e.g. left foot).\n         *\n         * Note: Enabling this will override any previously set `anchor` on each frame change.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.updateAnchor = false;\n\n        /**\n         * Function to call when an AnimatedSprite finishes playing.\n         *\n         * @member {Function}\n         */\n        this.onComplete = null;\n\n        /**\n         * Function to call when an AnimatedSprite changes which texture is being rendered.\n         *\n         * @member {Function}\n         */\n        this.onFrameChange = null;\n\n        /**\n         * Function to call when `loop` is true, and an AnimatedSprite is played and loops around to start again.\n         *\n         * @member {Function}\n         */\n        this.onLoop = null;\n\n        /**\n         * Elapsed time since animation has been started, used internally to display current texture.\n         *\n         * @member {number}\n         * @private\n         */\n        this._currentTime = 0;\n\n        /**\n         * Indicates if the AnimatedSprite is currently playing.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.playing = false;\n    }\n\n    /**\n     * Stops the AnimatedSprite.\n     *\n     */\n    stop()\n    {\n        if (!this.playing)\n        {\n            return;\n        }\n\n        this.playing = false;\n        if (this._autoUpdate)\n        {\n            Ticker.shared.remove(this.update, this);\n        }\n    }\n\n    /**\n     * Plays the AnimatedSprite.\n     *\n     */\n    play()\n    {\n        if (this.playing)\n        {\n            return;\n        }\n\n        this.playing = true;\n        if (this._autoUpdate)\n        {\n            Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame.\n     *\n     * @param {number} frameNumber - Frame index to stop at.\n     */\n    gotoAndStop(frameNumber)\n    {\n        this.stop();\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite.\n     *\n     * @param {number} frameNumber - Frame index to start at.\n     */\n    gotoAndPlay(frameNumber)\n    {\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     *\n     * @private\n     * @param {number} deltaTime - Time since last tick.\n     */\n    update(deltaTime)\n    {\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this._currentTime = 0;\n            this.stop();\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this._currentTime = this._textures.length - 1;\n            this.stop();\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            if (this.loop && this.onLoop)\n            {\n                if (this.animationSpeed > 0 && this.currentFrame < previousFrame)\n                {\n                    this.onLoop();\n                }\n                else if (this.animationSpeed < 0 && this.currentFrame > previousFrame)\n                {\n                    this.onLoop();\n                }\n            }\n\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Updates the displayed texture to match the current frame index.\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        this._texture = this._textures[this.currentFrame];\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = this._texture._uvs.uvsFloat32;\n\n        if (this.updateAnchor)\n        {\n            this._anchor.copyFrom(this._texture.defaultAnchor);\n        }\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value.\n     * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n     */\n    destroy(options)\n    {\n        this.stop();\n        super.destroy(options);\n\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of frame ids.\n     *\n     * @static\n     * @param {string[]} frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n     * @return {AnimatedSprite} The new animated sprite with the specified frames.\n     */\n    static fromFrames(frames)\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(Texture.from(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of image ids.\n     *\n     * @static\n     * @param {string[]} images - The array of image urls the AnimatedSprite will use as its texture frames.\n     * @return {AnimatedSprite} The new animate sprite with the specified images as frames.\n     */\n    static fromImages(images)\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(Texture.from(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * The total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     *\n     * @readonly\n     * @member {number}\n     * @default 0\n     */\n    get totalFrames()\n    {\n        return this._textures.length;\n    }\n\n    /**\n     * The array of textures used for this AnimatedSprite.\n     *\n     * @member {PIXI.Texture[]}\n     */\n    get textures()\n    {\n        return this._textures;\n    }\n\n    set textures(value) // eslint-disable-line require-jsdoc\n    {\n        if (value[0] instanceof Texture)\n        {\n            this._textures = value;\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push(value[i].texture);\n                this._durations.push(value[i].time);\n            }\n        }\n        this.gotoAndStop(0);\n        this.updateTexture();\n    }\n\n    /**\n    * The AnimatedSprites current frame index.\n    *\n    * @member {number}\n    * @readonly\n    */\n    get currentFrame()\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n}\n\n/**\n * @memberof PIXI.AnimatedSprite\n * @typedef {object} FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n"],"names":["super","Texture","Ticker","UPDATE_PRIORITY","const","let","Sprite"],"mappings":"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"}